'use strict';

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _get = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var ErrorReportingMixinBase = require('./mixin-base');

var PositionTrackingPreprocessorMixin = require('../position-tracking/preprocessor-mixin');

var Mixin = require('../../utils/mixin');

var ErrorReportingPreprocessorMixin = /*#__PURE__*/ function(_ErrorReportingMixinB) {
    _inherits(ErrorReportingPreprocessorMixin, _ErrorReportingMixinB);

    function ErrorReportingPreprocessorMixin(preprocessor, opts) {
        var _this;

        _classCallCheck(this, ErrorReportingPreprocessorMixin);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorReportingPreprocessorMixin).call(this, preprocessor, opts));
        _this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);
        _this.lastErrOffset = -1;
        return _this;
    }

    _createClass(ErrorReportingPreprocessorMixin, [{
        key: "_reportError",
        value: function _reportError(code) {
            //NOTE: avoid reporting error twice on advance/retreat
            if (this.lastErrOffset !== this.posTracker.offset) {
                this.lastErrOffset = this.posTracker.offset;

                _get(_getPrototypeOf(ErrorReportingPreprocessorMixin.prototype), "_reportError", this).call(this, code);
            }
        }
    }]);

    return ErrorReportingPreprocessorMixin;
}(ErrorReportingMixinBase);

module.exports = ErrorReportingPreprocessorMixin;