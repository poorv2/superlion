'use strict';

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var ErrorReportingMixinBase = require('./mixin-base');

var ErrorReportingTokenizerMixin = require('./tokenizer-mixin');

var LocationInfoTokenizerMixin = require('../location-info/tokenizer-mixin');

var Mixin = require('../../utils/mixin');

var ErrorReportingParserMixin = /*#__PURE__*/ function(_ErrorReportingMixinB) {
    _inherits(ErrorReportingParserMixin, _ErrorReportingMixinB);

    function ErrorReportingParserMixin(parser, opts) {
        var _this;

        _classCallCheck(this, ErrorReportingParserMixin);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(ErrorReportingParserMixin).call(this, parser, opts));
        _this.opts = opts;
        _this.ctLoc = null;
        _this.locBeforeToken = false;
        return _this;
    }

    _createClass(ErrorReportingParserMixin, [{
        key: "_setErrorLocation",
        value: function _setErrorLocation(err) {
            if (this.ctLoc) {
                err.startLine = this.ctLoc.startLine;
                err.startCol = this.ctLoc.startCol;
                err.startOffset = this.ctLoc.startOffset;
                err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
                err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
                err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
            }
        }
    }, {
        key: "_getOverriddenMethods",
        value: function _getOverriddenMethods(mxn, orig) {
            return {
                _bootstrap: function _bootstrap(document, fragmentContext) {
                    orig._bootstrap.call(this, document, fragmentContext);

                    Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
                    Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
                },
                _processInputToken: function _processInputToken(token) {
                    mxn.ctLoc = token.location;

                    orig._processInputToken.call(this, token);
                },
                _err: function _err(code, options) {
                    mxn.locBeforeToken = options && options.beforeToken;

                    mxn._reportError(code);
                }
            };
        }
    }]);

    return ErrorReportingParserMixin;
}(ErrorReportingMixinBase);

module.exports = ErrorReportingParserMixin;