'use strict';

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _get = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var _wrapNativeSuper = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper");

function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true,
        didErr = false,
        err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally {
                if (didErr) throw err;
            }
        }
    };
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

var encoder = require('./encoder');

var decoder = require('./decoder');

var constants = require('./constants');

var MT = constants.MT;
/**
 * Wrapper around a JavaScript Map object that allows the keys to be
 * any complex type.  The base Map object allows this, but will only
 * compare the keys by identity, not by value.  CborMap translates keys
 * to CBOR first (and base64's them to ensure by-value comparison).
 *
 * This is not a subclass of Object, because it would be tough to get
 * the semantics to be an exact match.
 *
 * @class CborMap
 * @extends {Map}
 */

var CborMap = /*#__PURE__*/ function(_Map) {
    _inherits(CborMap, _Map);

    /**
     * Creates an instance of CborMap.
     * @param {Iterable<any, any>} [iterable] An Array or other iterable
     *   object whose elements are key-value pairs (arrays with two elements, e.g.
     *   <code>[[ 1, 'one' ],[ 2, 'two' ]]</code>). Each key-value pair is added
     *   to the new CborMap; null values are treated as undefined.
     */
    function CborMap(iterable) {
        _classCallCheck(this, CborMap);

        return _possibleConstructorReturn(this, _getPrototypeOf(CborMap).call(this, iterable));
    }
    /**
     * @private
     */


    _createClass(CborMap, [{
        key: "get",

        /**
         * Retrieve a specified element.
         *
         * @param {any} key The key identifying the element to retrieve.
         *   Can be any type, which will be serialized into CBOR and compared by
         *   value.
         * @returns {any} The element if it exists, or <code>undefined</code>.
         */
        value: function get(key) {
            return _get(_getPrototypeOf(CborMap.prototype), "get", this).call(this, CborMap._encode(key));
        }
        /**
         * Adds or updates an element with a specified key and value.
         *
         * @param {any} key The key identifying the element to store.
         *   Can be any type, which will be serialized into CBOR and compared by
         *   value.
         * @param {any} val The element to store
         */

    }, {
        key: "set",
        value: function set(key, val) {
            return _get(_getPrototypeOf(CborMap.prototype), "set", this).call(this, CborMap._encode(key), val);
        }
        /**
         * Removes the specified element.
         *
         * @param {any} key The key identifying the element to delete.
         *   Can be any type, which will be serialized into CBOR and compared by
         *   value.
         * @returns {boolean}
         */

    }, {
        key: "delete",
        value: function _delete(key) {
            return _get(_getPrototypeOf(CborMap.prototype), "delete", this).call(this, CborMap._encode(key));
        }
        /**
         * Does an element with the specified key exist?
         *
         * @param {any} key The key identifying the element to check.
         *   Can be any type, which will be serialized into CBOR and compared by
         *   value.
         * @returns {boolean}
         */

    }, {
        key: "has",
        value: function has(key) {
            return _get(_getPrototypeOf(CborMap.prototype), "has", this).call(this, CborMap._encode(key));
        }
        /**
         * Returns a new Iterator object that contains the keys for each element
         * in the Map object in insertion order.  The keys are decoded into their
         * original format.
         *
         * @returns {IterableIterator<any>}
         */

    }, {
        key: "keys",
        value: /*#__PURE__*/ _regeneratorRuntime.mark(function keys() {
            var _iterator, _step, k;

            return _regeneratorRuntime.wrap(function keys$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            _iterator = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), "keys", this).call(this));
                            _context.prev = 1;

                            _iterator.s();

                        case 3:
                            if ((_step = _iterator.n()).done) {
                                _context.next = 9;
                                break;
                            }

                            k = _step.value;
                            _context.next = 7;
                            return CborMap._decode(k);

                        case 7:
                            _context.next = 3;
                            break;

                        case 9:
                            _context.next = 14;
                            break;

                        case 11:
                            _context.prev = 11;
                            _context.t0 = _context["catch"](1);

                            _iterator.e(_context.t0);

                        case 14:
                            _context.prev = 14;

                            _iterator.f();

                            return _context.finish(14);

                        case 17:
                        case "end":
                            return _context.stop();
                    }
                }
            }, keys, this, [
                [1, 11, 14, 17]
            ]);
        })
        /**
         * Returns a new Iterator object that contains the [key, value] pairs for
         * each element in the Map object in insertion order.
         *
         * @returns {IterableIterator}
         */

    }, {
        key: "entries",
        value: /*#__PURE__*/ _regeneratorRuntime.mark(function entries() {
            var _iterator2, _step2, kv;

            return _regeneratorRuntime.wrap(function entries$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            _iterator2 = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this));
                            _context2.prev = 1;

                            _iterator2.s();

                        case 3:
                            if ((_step2 = _iterator2.n()).done) {
                                _context2.next = 9;
                                break;
                            }

                            kv = _step2.value;
                            _context2.next = 7;
                            return [CborMap._decode(kv[0]), kv[1]];

                        case 7:
                            _context2.next = 3;
                            break;

                        case 9:
                            _context2.next = 14;
                            break;

                        case 11:
                            _context2.prev = 11;
                            _context2.t0 = _context2["catch"](1);

                            _iterator2.e(_context2.t0);

                        case 14:
                            _context2.prev = 14;

                            _iterator2.f();

                            return _context2.finish(14);

                        case 17:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, entries, this, [
                [1, 11, 14, 17]
            ]);
        })
        /**
         * Returns a new Iterator object that contains the [key, value] pairs for
         * each element in the Map object in insertion order.
         *
         * @returns {IterableIterator}
         */

    }, {
        key: Symbol.iterator,
        value: function value() {
            return this.entries();
        }
        /**
         * Executes a provided function once per each key/value pair in the Map
         * object, in insertion order.
         *
         * @param {function(any, any, Map): undefined} fun Function to execute for
         *  each element, which takes a value, a key, and the Map being traversed.
         * @param {any} thisArg Value to use as this when executing callback
         */

    }, {
        key: "forEach",
        value: function forEach(fun, thisArg) {
            if (typeof fun !== 'function') {
                throw new TypeError('Must be function');
            }

            var _iterator3 = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this)),
                _step3;

            try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var kv = _step3.value;
                    fun.call(this, kv[1], CborMap._decode(kv[0]), this);
                }
            } catch (err) {
                _iterator3.e(err);
            } finally {
                _iterator3.f();
            }
        }
        /**
         * Push the simple value onto the CBOR stream
         *
         * @param {Object} gen The generator to push onto
         * @returns {boolean} true on success
         */

    }, {
        key: "encodeCBOR",
        value: function encodeCBOR(gen) {
            if (!gen._pushInt(this.size, MT.MAP)) {
                return false;
            }

            if (gen.canonical) {
                var _entries = Array.from(_get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this)).map(function(kv) {
                    return [Buffer.from(kv[0], 'base64'), kv[1]];
                });

                _entries.sort(function(a, b) {
                    return a[0].compare(b[0]);
                });

                var _iterator4 = _createForOfIteratorHelper(_entries),
                    _step4;

                try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                        var kv = _step4.value;

                        if (!(gen.push(kv[0]) && gen.pushAny(kv[1]))) {
                            return false;
                        }
                    }
                } catch (err) {
                    _iterator4.e(err);
                } finally {
                    _iterator4.f();
                }
            } else {
                var _iterator5 = _createForOfIteratorHelper(_get(_getPrototypeOf(CborMap.prototype), "entries", this).call(this)),
                    _step5;

                try {
                    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                        var _kv = _step5.value;

                        if (!(gen.push(Buffer.from(_kv[0], 'base64')) && gen.pushAny(_kv[1]))) {
                            return false;
                        }
                    }
                } catch (err) {
                    _iterator5.e(err);
                } finally {
                    _iterator5.f();
                }
            }

            return true;
        }
    }], [{
        key: "_encode",
        value: function _encode(key) {
            return encoder.encodeCanonical(key).toString('base64');
        }
        /**
         * @private
         */

    }, {
        key: "_decode",
        value: function _decode(key) {
            return decoder.decodeFirstSync(key, 'base64');
        }
    }]);

    return CborMap;
}(_wrapNativeSuper(Map));

module.exports = CborMap;