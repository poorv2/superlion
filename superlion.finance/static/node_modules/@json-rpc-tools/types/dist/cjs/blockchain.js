"use strict";

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IBlockchainProvider = exports.IBlockchainAuthenticator = exports.IPendingRequests = void 0;

var misc_1 = require("./misc");

var provider_1 = require("./provider");

var IPendingRequests = function IPendingRequests(storage) {
    _classCallCheck(this, IPendingRequests);

    this.storage = storage;
};

exports.IPendingRequests = IPendingRequests;

var IBlockchainAuthenticator = /*#__PURE__*/ function(_misc_1$IEvents) {
    _inherits(IBlockchainAuthenticator, _misc_1$IEvents);

    function IBlockchainAuthenticator(config) {
        var _this;

        _classCallCheck(this, IBlockchainAuthenticator);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(IBlockchainAuthenticator).call(this));
        _this.config = config;
        return _this;
    }

    return IBlockchainAuthenticator;
}(misc_1.IEvents);

exports.IBlockchainAuthenticator = IBlockchainAuthenticator;

var IBlockchainProvider = /*#__PURE__*/ function(_provider_1$IJsonRpcP) {
    _inherits(IBlockchainProvider, _provider_1$IJsonRpcP);

    function IBlockchainProvider(connection, config) {
        _classCallCheck(this, IBlockchainProvider);

        return _possibleConstructorReturn(this, _getPrototypeOf(IBlockchainProvider).call(this, connection));
    }

    return IBlockchainProvider;
}(provider_1.IJsonRpcProvider);

exports.IBlockchainProvider = IBlockchainProvider;