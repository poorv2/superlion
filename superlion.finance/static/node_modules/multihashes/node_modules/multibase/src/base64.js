'use strict';

function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true,
        didErr = false,
        err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally {
                if (didErr) throw err;
            }
        }
    };
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

var _require = require('buffer'),
    Buffer = _require.Buffer;

module.exports = function base64(alphabet) {
    // The alphabet is only used to know:
    //   1. If padding is enabled (must contain '=')
    //   2. If the output must be url-safe (must contain '-' and '_')
    //   3. If the input of the output function is valid
    // The alphabets from RFC 4648 are always used.
    var padding = alphabet.indexOf('=') > -1;
    var url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;
    return {
        encode: function encode(input) {
            var output = '';

            if (typeof input === 'string') {
                output = Buffer.from(input).toString('base64');
            } else {
                output = input.toString('base64');
            }

            if (url) {
                output = output.replace(/\+/g, '-').replace(/\//g, '_');
            }

            var pad = output.indexOf('=');

            if (pad > 0 && !padding) {
                output = output.substring(0, pad);
            }

            return output;
        },
        decode: function decode(input) {
            var _iterator = _createForOfIteratorHelper(input),
                _step;

            try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    var char = _step.value;

                    if (alphabet.indexOf(char) < 0) {
                        throw new Error('invalid base64 character');
                    }
                }
            } catch (err) {
                _iterator.e(err);
            } finally {
                _iterator.f();
            }

            return Buffer.from(input, 'base64');
        }
    };
};