var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var _require = require('./setup'),
    web3 = _require.web3;

var ether = require('./ether');

var send = require('./send');

var _require2 = require('./config/singletons'),
    getSingletonsConfig = _require2.getSingletonsConfig;

var _require3 = require('@openzeppelin/contract-loader'),
    setupLoader = _require3.setupLoader;

var _require4 = require('./data'),
    ERC1820_REGISTRY_ABI = _require4.ERC1820_REGISTRY_ABI,
    ERC1820_REGISTRY_ADDRESS = _require4.ERC1820_REGISTRY_ADDRESS,
    ERC1820_REGISTRY_DEPLOY_TX = _require4.ERC1820_REGISTRY_DEPLOY_TX;

function ERC1820Registry(_x) {
    return _ERC1820Registry.apply(this, arguments);
}

function _ERC1820Registry() {
    _ERC1820Registry = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(funder) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.next = 2;
                        return web3.eth.getCode(ERC1820_REGISTRY_ADDRESS);

                    case 2:
                        _context.t0 = _context.sent.length;
                        _context.t1 = '0x0'.length;

                        if (!(_context.t0 > _context.t1)) {
                            _context.next = 6;
                            break;
                        }

                        return _context.abrupt("return", getDeployedERC1820Registry());

                    case 6:
                        _context.next = 8;
                        return send.ether(funder, '0xa990077c3205cbDf861e17Fa532eeB069cE9fF96', ether('0.08'));

                    case 8:
                        _context.next = 10;
                        return web3.eth.sendSignedTransaction(ERC1820_REGISTRY_DEPLOY_TX);

                    case 10:
                        return _context.abrupt("return", getDeployedERC1820Registry());

                    case 11:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee);
    }));
    return _ERC1820Registry.apply(this, arguments);
}

function getDeployedERC1820Registry() {
    return _getDeployedERC1820Registry.apply(this, arguments);
}

function _getDeployedERC1820Registry() {
    _getDeployedERC1820Registry = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
        var config, loader, registry, _registry;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        config = getSingletonsConfig();
                        loader = setupLoader({
                            provider: web3.currentProvider,
                            defaultGas: config.defaultGas,
                            defaultSender: config.defaultSender
                        });

                        if (!(config.abstraction === 'truffle')) {
                            _context2.next = 7;
                            break;
                        }

                        registry = loader.truffle.fromABI(ERC1820_REGISTRY_ABI);
                        return _context2.abrupt("return", registry.at(ERC1820_REGISTRY_ADDRESS));

                    case 7:
                        if (!(config.abstraction === 'web3')) {
                            _context2.next = 13;
                            break;
                        }

                        _registry = loader.web3.fromABI(ERC1820_REGISTRY_ABI);
                        _registry.options.address = ERC1820_REGISTRY_ADDRESS;
                        return _context2.abrupt("return", new web3.eth.Contract(ERC1820_REGISTRY_ABI, ERC1820_REGISTRY_ADDRESS));

                    case 13:
                        throw new Error("Unknown contract abstraction: '".concat(config.abstraction, "'"));

                    case 14:
                    case "end":
                        return _context2.stop();
                }
            }
        }, _callee2);
    }));
    return _getDeployedERC1820Registry.apply(this, arguments);
}

module.exports = {
    ERC1820Registry: ERC1820Registry
};