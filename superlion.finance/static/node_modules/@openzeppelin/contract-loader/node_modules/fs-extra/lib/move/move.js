'use strict';

var fs = require('graceful-fs');

var path = require('path');

var copy = require('../copy').copy;

var remove = require('../remove').remove;

var mkdirp = require('../mkdirs').mkdirp;

var pathExists = require('../path-exists').pathExists;

var stat = require('../util/stat');

function move(src, dest, opts, cb) {
    if (typeof opts === 'function') {
        cb = opts;
        opts = {};
    }

    var overwrite = opts.overwrite || opts.clobber || false;
    stat.checkPaths(src, dest, 'move', function(err, stats) {
        if (err) return cb(err);
        var srcStat = stats.srcStat;
        stat.checkParentPaths(src, srcStat, dest, 'move', function(err) {
            if (err) return cb(err);
            mkdirp(path.dirname(dest), function(err) {
                if (err) return cb(err);
                return doRename(src, dest, overwrite, cb);
            });
        });
    });
}

function doRename(src, dest, overwrite, cb) {
    if (overwrite) {
        return remove(dest, function(err) {
            if (err) return cb(err);
            return rename(src, dest, overwrite, cb);
        });
    }

    pathExists(dest, function(err, destExists) {
        if (err) return cb(err);
        if (destExists) return cb(new Error('dest already exists.'));
        return rename(src, dest, overwrite, cb);
    });
}

function rename(src, dest, overwrite, cb) {
    fs.rename(src, dest, function(err) {
        if (!err) return cb();
        if (err.code !== 'EXDEV') return cb(err);
        return moveAcrossDevice(src, dest, overwrite, cb);
    });
}

function moveAcrossDevice(src, dest, overwrite, cb) {
    var opts = {
        overwrite: overwrite,
        errorOnExist: true
    };
    copy(src, dest, opts, function(err) {
        if (err) return cb(err);
        return remove(src, cb);
    });
}

module.exports = move;