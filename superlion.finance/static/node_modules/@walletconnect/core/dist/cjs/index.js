"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

Object.defineProperty(exports, "__esModule", {
    value: true
});

var tslib_1 = require("tslib");

var utils_1 = require("@walletconnect/utils");

var socket_transport_1 = tslib_1.__importDefault(require("@walletconnect/socket-transport"));

var errors_1 = require("./errors");

var events_1 = tslib_1.__importDefault(require("./events"));

var storage_1 = tslib_1.__importDefault(require("./storage"));

var Connector = /*#__PURE__*/ function() {
    function Connector(opts) {
        _classCallCheck(this, Connector);

        this.protocol = "wc";
        this.version = 1;
        this._bridge = "";
        this._key = null;
        this._clientId = "";
        this._clientMeta = null;
        this._peerId = "";
        this._peerMeta = null;
        this._handshakeId = 0;
        this._handshakeTopic = "";
        this._connected = false;
        this._accounts = [];
        this._chainId = 0;
        this._networkId = 0;
        this._rpcUrl = "";
        this._eventManager = new events_1.default();
        this._clientMeta = utils_1.getClientMeta() || opts.connectorOpts.clientMeta || null;
        this._cryptoLib = opts.cryptoLib;
        this._sessionStorage = opts.sessionStorage || new storage_1.default();
        this._qrcodeModal = opts.connectorOpts.qrcodeModal;
        this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;

        if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {
            throw new Error(errors_1.ERROR_MISSING_REQUIRED);
        }

        if (opts.connectorOpts.bridge) {
            this.bridge = opts.connectorOpts.bridge;
        }

        if (opts.connectorOpts.uri) {
            this.uri = opts.connectorOpts.uri;
        }

        var session = opts.connectorOpts.session || this._getStorageSession();

        if (session) {
            this.session = session;
        }

        if (this.handshakeId) {
            this._subscribeToSessionResponse(this.handshakeId, "Session request rejected");
        }

        this._transport = opts.transport || new socket_transport_1.default({
            protocol: this.protocol,
            version: this.version,
            url: this.bridge,
            subscriptions: [this.clientId]
        });

        this._subscribeToInternalEvents();

        this._initTransport();

        if (opts.connectorOpts.uri) {
            this._subscribeToSessionRequest();
        }

        if (opts.pushServerOpts) {
            this._registerPushServer(opts.pushServerOpts);
        }
    }

    _createClass(Connector, [{
        key: "on",
        value: function on(event, callback) {
            var eventEmitter = {
                event: event,
                callback: callback
            };

            this._eventManager.subscribe(eventEmitter);
        }
    }, {
        key: "createInstantRequest",
        value: function createInstantRequest(instantRequest) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                var _this = this;

                var request, endInstantRequest, result;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this._generateKey();

                            case 2:
                                this._key = _context.sent;
                                request = this._formatRequest({
                                    method: "wc_instantRequest",
                                    params: [{
                                        peerId: this.clientId,
                                        peerMeta: this.clientMeta,
                                        request: this._formatRequest(instantRequest)
                                    }]
                                });
                                this.handshakeId = request.id;
                                this.handshakeTopic = utils_1.uuid();

                                this._eventManager.trigger({
                                    event: "display_uri",
                                    params: [this.uri]
                                });

                                this.on("modal_closed", function() {
                                    throw new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED);
                                });

                                endInstantRequest = function endInstantRequest() {
                                    _this.killSession();
                                };

                                _context.prev = 9;
                                _context.next = 12;
                                return this._sendCallRequest(request);

                            case 12:
                                result = _context.sent;

                                if (result) {
                                    endInstantRequest();
                                }

                                return _context.abrupt("return", result);

                            case 17:
                                _context.prev = 17;
                                _context.t0 = _context["catch"](9);
                                endInstantRequest();
                                throw _context.t0;

                            case 21:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [
                    [9, 17]
                ]);
            }));
        }
    }, {
        key: "connect",
        value: function connect(opts) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3() {
                var _this2 = this;

                return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (this._qrcodeModal) {
                                    _context3.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);

                            case 2:
                                if (!this.connected) {
                                    _context3.next = 4;
                                    break;
                                }

                                return _context3.abrupt("return", {
                                    chainId: this.chainId,
                                    accounts: this.accounts
                                });

                            case 4:
                                _context3.next = 6;
                                return this.createSession(opts);

                            case 6:
                                return _context3.abrupt("return", new Promise(function(resolve, reject) {
                                    return tslib_1.__awaiter(_this2, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
                                        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                                            while (1) {
                                                switch (_context2.prev = _context2.next) {
                                                    case 0:
                                                        this.on("modal_closed", function() {
                                                            return reject(new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED));
                                                        });
                                                        this.on("connect", function(error, payload) {
                                                            if (error) {
                                                                return reject(error);
                                                            }

                                                            resolve(payload.params[0]);
                                                        });

                                                    case 2:
                                                    case "end":
                                                        return _context2.stop();
                                                }
                                            }
                                        }, _callee2, this);
                                    }));
                                }));

                            case 7:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }, {
        key: "createSession",
        value: function createSession(opts) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4() {
                var request;
                return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (!this._connected) {
                                    _context4.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_SESSION_CONNECTED);

                            case 2:
                                if (!this.pending) {
                                    _context4.next = 4;
                                    break;
                                }

                                return _context4.abrupt("return");

                            case 4:
                                _context4.next = 6;
                                return this._generateKey();

                            case 6:
                                this._key = _context4.sent;
                                request = this._formatRequest({
                                    method: "wc_sessionRequest",
                                    params: [{
                                        peerId: this.clientId,
                                        peerMeta: this.clientMeta,
                                        chainId: opts && opts.chainId ? opts.chainId : null
                                    }]
                                });
                                this.handshakeId = request.id;
                                this.handshakeTopic = utils_1.uuid();

                                this._sendSessionRequest(request, "Session update rejected", {
                                    topic: this.handshakeTopic
                                });

                                this._eventManager.trigger({
                                    event: "display_uri",
                                    params: [this.uri]
                                });

                            case 12:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
        }
    }, {
        key: "approveSession",
        value: function approveSession(sessionStatus) {
            if (this._connected) {
                throw new Error(errors_1.ERROR_SESSION_CONNECTED);
            }

            this.chainId = sessionStatus.chainId;
            this.accounts = sessionStatus.accounts;
            this.networkId = sessionStatus.networkId || 0;
            this.rpcUrl = sessionStatus.rpcUrl || "";
            var sessionParams = {
                approved: true,
                chainId: this.chainId,
                networkId: this.networkId,
                accounts: this.accounts,
                rpcUrl: this.rpcUrl,
                peerId: this.clientId,
                peerMeta: this.clientMeta
            };
            var response = {
                id: this.handshakeId,
                jsonrpc: "2.0",
                result: sessionParams
            };

            this._sendResponse(response);

            this._connected = true;

            this._setStorageSession();

            this._eventManager.trigger({
                event: "connect",
                params: [{
                    peerId: this.peerId,
                    peerMeta: this.peerMeta,
                    chainId: this.chainId,
                    accounts: this.accounts
                }]
            });
        }
    }, {
        key: "rejectSession",
        value: function rejectSession(sessionError) {
            if (this._connected) {
                throw new Error(errors_1.ERROR_SESSION_CONNECTED);
            }

            var message = sessionError && sessionError.message ? sessionError.message : errors_1.ERROR_SESSION_REJECTED;

            var response = this._formatResponse({
                id: this.handshakeId,
                error: {
                    message: message
                }
            });

            this._sendResponse(response);

            this._connected = false;

            this._eventManager.trigger({
                event: "disconnect",
                params: [{
                    message: message
                }]
            });

            this._removeStorageSession();
        }
    }, {
        key: "updateSession",
        value: function updateSession(sessionStatus) {
            if (!this._connected) {
                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);
            }

            this.chainId = sessionStatus.chainId;
            this.accounts = sessionStatus.accounts;
            this.networkId = sessionStatus.networkId || 0;
            this.rpcUrl = sessionStatus.rpcUrl || "";
            var sessionParams = {
                approved: true,
                chainId: this.chainId,
                networkId: this.networkId,
                accounts: this.accounts,
                rpcUrl: this.rpcUrl
            };

            var request = this._formatRequest({
                method: "wc_sessionUpdate",
                params: [sessionParams]
            });

            this._sendSessionRequest(request, "Session update rejected");

            this._eventManager.trigger({
                event: "session_update",
                params: [{
                    chainId: this.chainId,
                    accounts: this.accounts
                }]
            });

            this._manageStorageSession();
        }
    }, {
        key: "killSession",
        value: function killSession(sessionError) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee5() {
                var message, sessionParams, request;
                return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                message = sessionError ? sessionError.message : "Session Disconnected";
                                sessionParams = {
                                    approved: false,
                                    chainId: null,
                                    networkId: null,
                                    accounts: null
                                };
                                request = this._formatRequest({
                                    method: "wc_sessionUpdate",
                                    params: [sessionParams]
                                });
                                _context5.next = 5;
                                return this._sendRequest(request);

                            case 5:
                                this._handleSessionDisconnect(message);

                            case 6:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));
        }
    }, {
        key: "sendTransaction",
        value: function sendTransaction(tx) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee6() {
                var parsedTx, request, result;
                return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                if (this._connected) {
                                    _context6.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);

                            case 2:
                                parsedTx = utils_1.parseTransactionData(tx);
                                request = this._formatRequest({
                                    method: "eth_sendTransaction",
                                    params: [parsedTx]
                                });
                                _context6.next = 6;
                                return this._sendCallRequest(request);

                            case 6:
                                result = _context6.sent;
                                return _context6.abrupt("return", result);

                            case 8:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));
        }
    }, {
        key: "signTransaction",
        value: function signTransaction(tx) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee7() {
                var parsedTx, request, result;
                return _regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                if (this._connected) {
                                    _context7.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);

                            case 2:
                                parsedTx = utils_1.parseTransactionData(tx);
                                request = this._formatRequest({
                                    method: "eth_signTransaction",
                                    params: [parsedTx]
                                });
                                _context7.next = 6;
                                return this._sendCallRequest(request);

                            case 6:
                                result = _context7.sent;
                                return _context7.abrupt("return", result);

                            case 8:
                            case "end":
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));
        }
    }, {
        key: "signMessage",
        value: function signMessage(params) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee8() {
                var request, result;
                return _regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                if (this._connected) {
                                    _context8.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);

                            case 2:
                                request = this._formatRequest({
                                    method: "eth_sign",
                                    params: params
                                });
                                _context8.next = 5;
                                return this._sendCallRequest(request);

                            case 5:
                                result = _context8.sent;
                                return _context8.abrupt("return", result);

                            case 7:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));
        }
    }, {
        key: "signPersonalMessage",
        value: function signPersonalMessage(params) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee9() {
                var request, result;
                return _regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                if (this._connected) {
                                    _context9.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);

                            case 2:
                                params = utils_1.parsePersonalSign(params);
                                request = this._formatRequest({
                                    method: "personal_sign",
                                    params: params
                                });
                                _context9.next = 6;
                                return this._sendCallRequest(request);

                            case 6:
                                result = _context9.sent;
                                return _context9.abrupt("return", result);

                            case 8:
                            case "end":
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));
        }
    }, {
        key: "signTypedData",
        value: function signTypedData(params) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee10() {
                var request, result;
                return _regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                if (this._connected) {
                                    _context10.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);

                            case 2:
                                request = this._formatRequest({
                                    method: "eth_signTypedData",
                                    params: params
                                });
                                _context10.next = 5;
                                return this._sendCallRequest(request);

                            case 5:
                                result = _context10.sent;
                                return _context10.abrupt("return", result);

                            case 7:
                            case "end":
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));
        }
    }, {
        key: "updateChain",
        value: function updateChain(chainParams) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee11() {
                var request, result;
                return _regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                if (this._connected) {
                                    _context11.next = 2;
                                    break;
                                }

                                throw new Error("Session currently disconnected");

                            case 2:
                                request = this._formatRequest({
                                    method: "wallet_updateChain",
                                    params: [chainParams]
                                });
                                _context11.next = 5;
                                return this._sendCallRequest(request);

                            case 5:
                                result = _context11.sent;
                                return _context11.abrupt("return", result);

                            case 7:
                            case "end":
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));
        }
    }, {
        key: "unsafeSend",
        value: function unsafeSend(request, options) {
            var _this3 = this;

            this._sendRequest(request, options);

            return new Promise(function(resolve, reject) {
                _this3._subscribeToResponse(request.id, function(error, payload) {
                    if (error) {
                        reject(error);
                        return;
                    }

                    if (!payload) {
                        throw new Error(errors_1.ERROR_MISSING_JSON_RPC);
                    }

                    resolve(payload);
                });
            });
        }
    }, {
        key: "sendCustomRequest",
        value: function sendCustomRequest(request, options) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee12() {
                var formattedRequest, result;
                return _regeneratorRuntime.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                if (this._connected) {
                                    _context12.next = 2;
                                    break;
                                }

                                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);

                            case 2:
                                _context12.t0 = request.method;
                                _context12.next = _context12.t0 === "eth_accounts" ? 5 : _context12.t0 === "eth_chainId" ? 6 : _context12.t0 === "eth_sendTransaction" ? 7 : _context12.t0 === "eth_signTransaction" ? 7 : _context12.t0 === "personal_sign" ? 9 : 11;
                                break;

                            case 5:
                                return _context12.abrupt("return", this.accounts);

                            case 6:
                                return _context12.abrupt("return", utils_1.convertNumberToHex(this.chainId));

                            case 7:
                                if (request.params) {
                                    request.params[0] = utils_1.parseTransactionData(request.params[0]);
                                }

                                return _context12.abrupt("break", 12);

                            case 9:
                                if (request.params) {
                                    request.params = utils_1.parsePersonalSign(request.params);
                                }

                                return _context12.abrupt("break", 12);

                            case 11:
                                return _context12.abrupt("break", 12);

                            case 12:
                                formattedRequest = this._formatRequest(request);
                                _context12.next = 15;
                                return this._sendCallRequest(formattedRequest, options);

                            case 15:
                                result = _context12.sent;
                                return _context12.abrupt("return", result);

                            case 17:
                            case "end":
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));
        }
    }, {
        key: "approveRequest",
        value: function approveRequest(response) {
            if (utils_1.isJsonRpcResponseSuccess(response)) {
                var formattedResponse = this._formatResponse(response);

                this._sendResponse(formattedResponse);
            } else {
                throw new Error(errors_1.ERROR_MISSING_RESULT);
            }
        }
    }, {
        key: "rejectRequest",
        value: function rejectRequest(response) {
            if (utils_1.isJsonRpcResponseError(response)) {
                var formattedResponse = this._formatResponse(response);

                this._sendResponse(formattedResponse);
            } else {
                throw new Error(errors_1.ERROR_MISSING_ERROR);
            }
        }
    }, {
        key: "_sendRequest",
        value: function _sendRequest(request, options) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee13() {
                var callRequest, encryptionPayload, topic, payload, silent;
                return _regeneratorRuntime.wrap(function _callee13$(_context13) {
                    while (1) {
                        switch (_context13.prev = _context13.next) {
                            case 0:
                                callRequest = this._formatRequest(request);
                                _context13.next = 3;
                                return this._encrypt(callRequest);

                            case 3:
                                encryptionPayload = _context13.sent;
                                topic = typeof(options === null || options === void 0 ? void 0 : options.topic) !== "undefined" ? options.topic : this.peerId;
                                payload = JSON.stringify(encryptionPayload);
                                silent = typeof(options === null || options === void 0 ? void 0 : options.forcePushNotification) !== "undefined" ? !options.forcePushNotification : utils_1.isSilentPayload(callRequest);

                                this._transport.send(payload, topic, silent);

                            case 8:
                            case "end":
                                return _context13.stop();
                        }
                    }
                }, _callee13, this);
            }));
        }
    }, {
        key: "_sendResponse",
        value: function _sendResponse(response) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee14() {
                var encryptionPayload, topic, payload, silent;
                return _regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                _context14.next = 2;
                                return this._encrypt(response);

                            case 2:
                                encryptionPayload = _context14.sent;
                                topic = this.peerId;
                                payload = JSON.stringify(encryptionPayload);
                                silent = true;

                                this._transport.send(payload, topic, silent);

                            case 7:
                            case "end":
                                return _context14.stop();
                        }
                    }
                }, _callee14, this);
            }));
        }
    }, {
        key: "_sendSessionRequest",
        value: function _sendSessionRequest(request, errorMsg, options) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee15() {
                return _regeneratorRuntime.wrap(function _callee15$(_context15) {
                    while (1) {
                        switch (_context15.prev = _context15.next) {
                            case 0:
                                this._sendRequest(request, options);

                                this._subscribeToSessionResponse(request.id, errorMsg);

                            case 2:
                            case "end":
                                return _context15.stop();
                        }
                    }
                }, _callee15, this);
            }));
        }
    }, {
        key: "_sendCallRequest",
        value: function _sendCallRequest(request, options) {
            this._sendRequest(request, options);

            this._eventManager.trigger({
                event: "call_request_sent",
                params: [{
                    request: request,
                    options: options
                }]
            });

            if (utils_1.isMobile() && utils_1.signingMethods.includes(request.method)) {
                var mobileLinkUrl = utils_1.getLocal(utils_1.mobileLinkChoiceKey);

                if (mobileLinkUrl) {
                    window.location.href = mobileLinkUrl.href;
                }
            }

            return this._subscribeToCallResponse(request.id);
        }
    }, {
        key: "_formatRequest",
        value: function _formatRequest(request) {
            if (typeof request.method === "undefined") {
                throw new Error(errors_1.ERROR_MISSING_METHOD);
            }

            var formattedRequest = {
                id: typeof request.id === "undefined" ? utils_1.payloadId() : request.id,
                jsonrpc: "2.0",
                method: request.method,
                params: typeof request.params === "undefined" ? [] : request.params
            };
            return formattedRequest;
        }
    }, {
        key: "_formatResponse",
        value: function _formatResponse(response) {
            if (typeof response.id === "undefined") {
                throw new Error(errors_1.ERROR_MISSING_ID);
            }

            var baseResponse = {
                id: response.id,
                jsonrpc: "2.0"
            };

            if (utils_1.isJsonRpcResponseError(response)) {
                var error = utils_1.formatRpcError(response.error);
                var errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {
                    error: error
                });
                return errorResponse;
            } else if (utils_1.isJsonRpcResponseSuccess(response)) {
                var successResponse = Object.assign(Object.assign({}, baseResponse), response);
                return successResponse;
            }

            throw new Error(errors_1.ERROR_INVALID_RESPONSE);
        }
    }, {
        key: "_handleSessionDisconnect",
        value: function _handleSessionDisconnect(errorMsg) {
            var message = errorMsg || "Session Disconnected";

            if (!this._connected) {
                if (this._qrcodeModal) {
                    this._qrcodeModal.close();
                }

                utils_1.removeLocal(utils_1.mobileLinkChoiceKey);
            }

            if (this._connected) {
                this._connected = false;
            }

            if (this._handshakeId) {
                this._handshakeId = 0;
            }

            if (this._handshakeTopic) {
                this._handshakeTopic = "";
            }

            this._eventManager.trigger({
                event: "disconnect",
                params: [{
                    message: message
                }]
            });

            this._removeStorageSession();

            this._transport.close();
        }
    }, {
        key: "_handleSessionResponse",
        value: function _handleSessionResponse(errorMsg, sessionParams) {
            if (sessionParams) {
                if (sessionParams.approved) {
                    if (!this._connected) {
                        this._connected = true;

                        if (sessionParams.chainId) {
                            this.chainId = sessionParams.chainId;
                        }

                        if (sessionParams.accounts) {
                            this.accounts = sessionParams.accounts;
                        }

                        if (sessionParams.peerId && !this.peerId) {
                            this.peerId = sessionParams.peerId;
                        }

                        if (sessionParams.peerMeta && !this.peerMeta) {
                            this.peerMeta = sessionParams.peerMeta;
                        }

                        this._eventManager.trigger({
                            event: "connect",
                            params: [{
                                peerId: this.peerId,
                                peerMeta: this.peerMeta,
                                chainId: this.chainId,
                                accounts: this.accounts
                            }]
                        });
                    } else {
                        if (sessionParams.chainId) {
                            this.chainId = sessionParams.chainId;
                        }

                        if (sessionParams.accounts) {
                            this.accounts = sessionParams.accounts;
                        }

                        this._eventManager.trigger({
                            event: "session_update",
                            params: [{
                                chainId: this.chainId,
                                accounts: this.accounts
                            }]
                        });
                    }

                    this._manageStorageSession();
                } else {
                    this._handleSessionDisconnect(errorMsg);
                }
            } else {
                this._handleSessionDisconnect(errorMsg);
            }
        }
    }, {
        key: "_handleIncomingMessages",
        value: function _handleIncomingMessages(socketMessage) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee16() {
                var activeTopics, encryptionPayload, payload;
                return _regeneratorRuntime.wrap(function _callee16$(_context16) {
                    while (1) {
                        switch (_context16.prev = _context16.next) {
                            case 0:
                                activeTopics = [this.clientId, this.handshakeTopic];

                                if (activeTopics.includes(socketMessage.topic)) {
                                    _context16.next = 3;
                                    break;
                                }

                                return _context16.abrupt("return");

                            case 3:
                                _context16.prev = 3;
                                encryptionPayload = JSON.parse(socketMessage.payload);
                                _context16.next = 10;
                                break;

                            case 7:
                                _context16.prev = 7;
                                _context16.t0 = _context16["catch"](3);
                                return _context16.abrupt("return");

                            case 10:
                                _context16.next = 12;
                                return this._decrypt(encryptionPayload);

                            case 12:
                                payload = _context16.sent;

                                if (payload) {
                                    this._eventManager.trigger(payload);
                                }

                            case 14:
                            case "end":
                                return _context16.stop();
                        }
                    }
                }, _callee16, this, [
                    [3, 7]
                ]);
            }));
        }
    }, {
        key: "_subscribeToSessionRequest",
        value: function _subscribeToSessionRequest() {
            this._transport.subscribe(this.handshakeTopic);
        }
    }, {
        key: "_subscribeToResponse",
        value: function _subscribeToResponse(id, callback) {
            this.on("response:".concat(id), callback);
        }
    }, {
        key: "_subscribeToSessionResponse",
        value: function _subscribeToSessionResponse(id, errorMsg) {
            var _this4 = this;

            this._subscribeToResponse(id, function(error, payload) {
                if (error) {
                    _this4._handleSessionResponse(error.message);

                    return;
                }

                if (payload.result) {
                    _this4._handleSessionResponse(errorMsg, payload.result);
                } else if (payload.error && payload.error.message) {
                    _this4._handleSessionResponse(payload.error.message);
                } else {
                    _this4._handleSessionResponse(errorMsg);
                }
            });
        }
    }, {
        key: "_subscribeToCallResponse",
        value: function _subscribeToCallResponse(id) {
            var _this5 = this;

            return new Promise(function(resolve, reject) {
                _this5._subscribeToResponse(id, function(error, payload) {
                    if (error) {
                        reject(error);
                        return;
                    }

                    if (payload.result) {
                        resolve(payload.result);
                    } else if (payload.error && payload.error.message) {
                        reject(new Error(payload.error.message));
                    } else {
                        reject(new Error(errors_1.ERROR_INVALID_RESPONSE));
                    }
                });
            });
        }
    }, {
        key: "_subscribeToInternalEvents",
        value: function _subscribeToInternalEvents() {
            var _this6 = this;

            this.on("display_uri", function() {
                if (_this6._qrcodeModal) {
                    _this6._qrcodeModal.open(_this6.uri, function() {
                        _this6._eventManager.trigger({
                            event: "modal_closed",
                            params: []
                        });
                    }, _this6._qrcodeModalOptions);
                }
            });
            this.on("connect", function() {
                if (_this6._qrcodeModal) {
                    _this6._qrcodeModal.close();
                }
            });
            this.on("wc_sessionRequest", function(error, payload) {
                if (error) {
                    _this6._eventManager.trigger({
                        event: "error",
                        params: [{
                            code: "SESSION_REQUEST_ERROR",
                            message: error.toString()
                        }]
                    });
                }

                _this6.handshakeId = payload.id;
                _this6.peerId = payload.params[0].peerId;
                _this6.peerMeta = payload.params[0].peerMeta;
                var internalPayload = Object.assign(Object.assign({}, payload), {
                    method: "session_request"
                });

                _this6._eventManager.trigger(internalPayload);
            });
            this.on("wc_sessionUpdate", function(error, payload) {
                if (error) {
                    _this6._handleSessionResponse(error.message);
                }

                _this6._handleSessionResponse("Session disconnected", payload.params[0]);
            });
        }
    }, {
        key: "_initTransport",
        value: function _initTransport() {
            var _this7 = this;

            this._transport.on("message", function(socketMessage) {
                return _this7._handleIncomingMessages(socketMessage);
            });

            this._transport.on("open", function() {
                return _this7._eventManager.trigger({
                    event: "transport_open",
                    params: []
                });
            });

            this._transport.on("close", function() {
                return _this7._eventManager.trigger({
                    event: "transport_close",
                    params: []
                });
            });

            this._transport.on("error", function() {
                return _this7._eventManager.trigger({
                    event: "transport_error",
                    params: ["Websocket connection failed"]
                });
            });

            this._transport.open();
        }
    }, {
        key: "_formatUri",
        value: function _formatUri() {
            var protocol = this.protocol;
            var handshakeTopic = this.handshakeTopic;
            var version = this.version;
            var bridge = encodeURIComponent(this.bridge);
            var key = this.key;
            var uri = "".concat(protocol, ":").concat(handshakeTopic, "@").concat(version, "?bridge=").concat(bridge, "&key=").concat(key);
            return uri;
        }
    }, {
        key: "_parseUri",
        value: function _parseUri(uri) {
            var result = utils_1.parseWalletConnectUri(uri);

            if (result.protocol === this.protocol) {
                if (!result.handshakeTopic) {
                    throw Error("Invalid or missing handshakeTopic parameter value");
                }

                var handshakeTopic = result.handshakeTopic;

                if (!result.bridge) {
                    throw Error("Invalid or missing bridge url parameter value");
                }

                var bridge = decodeURIComponent(result.bridge);

                if (!result.key) {
                    throw Error("Invalid or missing key parameter value");
                }

                var key = result.key;
                return {
                    handshakeTopic: handshakeTopic,
                    bridge: bridge,
                    key: key
                };
            } else {
                throw new Error(errors_1.ERROR_INVALID_URI);
            }
        }
    }, {
        key: "_generateKey",
        value: function _generateKey() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee17() {
                var result;
                return _regeneratorRuntime.wrap(function _callee17$(_context17) {
                    while (1) {
                        switch (_context17.prev = _context17.next) {
                            case 0:
                                if (!this._cryptoLib) {
                                    _context17.next = 5;
                                    break;
                                }

                                _context17.next = 3;
                                return this._cryptoLib.generateKey();

                            case 3:
                                result = _context17.sent;
                                return _context17.abrupt("return", result);

                            case 5:
                                return _context17.abrupt("return", null);

                            case 6:
                            case "end":
                                return _context17.stop();
                        }
                    }
                }, _callee17, this);
            }));
        }
    }, {
        key: "_encrypt",
        value: function _encrypt(data) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee18() {
                var key, result;
                return _regeneratorRuntime.wrap(function _callee18$(_context18) {
                    while (1) {
                        switch (_context18.prev = _context18.next) {
                            case 0:
                                key = this._key;

                                if (!(this._cryptoLib && key)) {
                                    _context18.next = 6;
                                    break;
                                }

                                _context18.next = 4;
                                return this._cryptoLib.encrypt(data, key);

                            case 4:
                                result = _context18.sent;
                                return _context18.abrupt("return", result);

                            case 6:
                                return _context18.abrupt("return", null);

                            case 7:
                            case "end":
                                return _context18.stop();
                        }
                    }
                }, _callee18, this);
            }));
        }
    }, {
        key: "_decrypt",
        value: function _decrypt(payload) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee19() {
                var key, result;
                return _regeneratorRuntime.wrap(function _callee19$(_context19) {
                    while (1) {
                        switch (_context19.prev = _context19.next) {
                            case 0:
                                key = this._key;

                                if (!(this._cryptoLib && key)) {
                                    _context19.next = 6;
                                    break;
                                }

                                _context19.next = 4;
                                return this._cryptoLib.decrypt(payload, key);

                            case 4:
                                result = _context19.sent;
                                return _context19.abrupt("return", result);

                            case 6:
                                return _context19.abrupt("return", null);

                            case 7:
                            case "end":
                                return _context19.stop();
                        }
                    }
                }, _callee19, this);
            }));
        }
    }, {
        key: "_getStorageSession",
        value: function _getStorageSession() {
            var result = null;

            if (this._sessionStorage) {
                result = this._sessionStorage.getSession();
            }

            return result;
        }
    }, {
        key: "_setStorageSession",
        value: function _setStorageSession() {
            if (this._sessionStorage) {
                this._sessionStorage.setSession(this.session);
            }
        }
    }, {
        key: "_removeStorageSession",
        value: function _removeStorageSession() {
            if (this._sessionStorage) {
                this._sessionStorage.removeSession();
            }
        }
    }, {
        key: "_manageStorageSession",
        value: function _manageStorageSession() {
            if (this._connected) {
                this._setStorageSession();
            } else {
                this._removeStorageSession();
            }
        }
    }, {
        key: "_registerPushServer",
        value: function _registerPushServer(pushServerOpts) {
            var _this8 = this;

            if (!pushServerOpts.url || typeof pushServerOpts.url !== "string") {
                throw Error("Invalid or missing pushServerOpts.url parameter value");
            }

            if (!pushServerOpts.type || typeof pushServerOpts.type !== "string") {
                throw Error("Invalid or missing pushServerOpts.type parameter value");
            }

            if (!pushServerOpts.token || typeof pushServerOpts.token !== "string") {
                throw Error("Invalid or missing pushServerOpts.token parameter value");
            }

            var pushSubscription = {
                bridge: this.bridge,
                topic: this.clientId,
                type: pushServerOpts.type,
                token: pushServerOpts.token,
                peerName: "",
                language: pushServerOpts.language || ""
            };
            this.on("connect", function(error, payload) {
                return tslib_1.__awaiter(_this8, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee20() {
                    var peerName, response, json;
                    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
                        while (1) {
                            switch (_context20.prev = _context20.next) {
                                case 0:
                                    if (!error) {
                                        _context20.next = 2;
                                        break;
                                    }

                                    throw error;

                                case 2:
                                    if (pushServerOpts.peerMeta) {
                                        peerName = payload.params[0].peerMeta.name;
                                        pushSubscription.peerName = peerName;
                                    }

                                    _context20.prev = 3;
                                    _context20.next = 6;
                                    return fetch("".concat(pushServerOpts.url, "/new"), {
                                        method: "POST",
                                        headers: {
                                            Accept: "application/json",
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify(pushSubscription)
                                    });

                                case 6:
                                    response = _context20.sent;
                                    _context20.next = 9;
                                    return response.json();

                                case 9:
                                    json = _context20.sent;

                                    if (json.success) {
                                        _context20.next = 12;
                                        break;
                                    }

                                    throw Error("Failed to register in Push Server");

                                case 12:
                                    _context20.next = 17;
                                    break;

                                case 14:
                                    _context20.prev = 14;
                                    _context20.t0 = _context20["catch"](3);
                                    throw Error("Failed to register in Push Server");

                                case 17:
                                case "end":
                                    return _context20.stop();
                            }
                        }
                    }, _callee20, null, [
                        [3, 14]
                    ]);
                }));
            });
        }
    }, {
        key: "bridge",
        set: function set(value) {
            if (!value) {
                return;
            }

            this._bridge = value;
        },
        get: function get() {
            return this._bridge;
        }
    }, {
        key: "key",
        set: function set(value) {
            if (!value) {
                return;
            }

            var key = utils_1.convertHexToArrayBuffer(value);
            this._key = key;
        },
        get: function get() {
            if (this._key) {
                var key = utils_1.convertArrayBufferToHex(this._key, true);
                return key;
            }

            return "";
        }
    }, {
        key: "clientId",
        set: function set(value) {
            if (!value) {
                return;
            }

            this._clientId = value;
        },
        get: function get() {
            var clientId = this._clientId;

            if (!clientId) {
                clientId = this._clientId = utils_1.uuid();
            }

            return this._clientId;
        }
    }, {
        key: "peerId",
        set: function set(value) {
            if (!value) {
                return;
            }

            this._peerId = value;
        },
        get: function get() {
            return this._peerId;
        }
    }, {
        key: "clientMeta",
        set: function set(value) {},
        get: function get() {
            var clientMeta = this._clientMeta;

            if (!clientMeta) {
                clientMeta = this._clientMeta = utils_1.getClientMeta();
            }

            return clientMeta;
        }
    }, {
        key: "peerMeta",
        set: function set(value) {
            this._peerMeta = value;
        },
        get: function get() {
            var peerMeta = this._peerMeta;
            return peerMeta;
        }
    }, {
        key: "handshakeTopic",
        set: function set(value) {
            if (!value) {
                return;
            }

            this._handshakeTopic = value;
        },
        get: function get() {
            return this._handshakeTopic;
        }
    }, {
        key: "handshakeId",
        set: function set(value) {
            if (!value) {
                return;
            }

            this._handshakeId = value;
        },
        get: function get() {
            return this._handshakeId;
        }
    }, {
        key: "uri",
        get: function get() {
            var _uri = this._formatUri();

            return _uri;
        },
        set: function set(value) {
            if (!value) {
                return;
            }

            var _this$_parseUri = this._parseUri(value),
                handshakeTopic = _this$_parseUri.handshakeTopic,
                bridge = _this$_parseUri.bridge,
                key = _this$_parseUri.key;

            this.handshakeTopic = handshakeTopic;
            this.bridge = bridge;
            this.key = key;
        }
    }, {
        key: "chainId",
        set: function set(value) {
            this._chainId = value;
        },
        get: function get() {
            var chainId = this._chainId;
            return chainId;
        }
    }, {
        key: "networkId",
        set: function set(value) {
            this._networkId = value;
        },
        get: function get() {
            var networkId = this._networkId;
            return networkId;
        }
    }, {
        key: "accounts",
        set: function set(value) {
            this._accounts = value;
        },
        get: function get() {
            var accounts = this._accounts;
            return accounts;
        }
    }, {
        key: "rpcUrl",
        set: function set(value) {
            this._rpcUrl = value;
        },
        get: function get() {
            var rpcUrl = this._rpcUrl;
            return rpcUrl;
        }
    }, {
        key: "connected",
        set: function set(value) {},
        get: function get() {
            return this._connected;
        }
    }, {
        key: "pending",
        set: function set(value) {},
        get: function get() {
            return !!this._handshakeTopic;
        }
    }, {
        key: "session",
        get: function get() {
            return {
                connected: this.connected,
                accounts: this.accounts,
                chainId: this.chainId,
                bridge: this.bridge,
                key: this.key,
                clientId: this.clientId,
                clientMeta: this.clientMeta,
                peerId: this.peerId,
                peerMeta: this.peerMeta,
                handshakeId: this.handshakeId,
                handshakeTopic: this.handshakeTopic
            };
        },
        set: function set(value) {
            if (!value) {
                return;
            }

            this._connected = value.connected;
            this.accounts = value.accounts;
            this.chainId = value.chainId;
            this.bridge = value.bridge;
            this.key = value.key;
            this.clientId = value.clientId;
            this.clientMeta = value.clientMeta;
            this.peerId = value.peerId;
            this.peerMeta = value.peerMeta;
            this.handshakeId = value.handshakeId;
            this.handshakeTopic = value.handshakeTopic;
        }
    }]);

    return Connector;
}();

exports.default = Connector;