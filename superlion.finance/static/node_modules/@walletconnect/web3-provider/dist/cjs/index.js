"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var _assertThisInitialized = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized");

Object.defineProperty(exports, "__esModule", {
    value: true
});

var tslib_1 = require("tslib");

var client_1 = tslib_1.__importDefault(require("@walletconnect/client"));

var qrcode_modal_1 = tslib_1.__importDefault(require("@walletconnect/qrcode-modal"));

var http_connection_1 = tslib_1.__importDefault(require("@walletconnect/http-connection"));

var utils_1 = require("@walletconnect/utils");

var ProviderEngine = require("web3-provider-engine");

var CacheSubprovider = require("web3-provider-engine/subproviders/cache");

var FixtureSubprovider = require("web3-provider-engine/subproviders/fixture");

var FilterSubprovider = require("web3-provider-engine/subproviders/filters");

var HookedWalletSubprovider = require("web3-provider-engine/subproviders/hooked-wallet");

var NonceSubprovider = require("web3-provider-engine/subproviders/nonce-tracker");

var SubscriptionsSubprovider = require("web3-provider-engine/subproviders/subscriptions");

var WalletConnectProvider = /*#__PURE__*/ function(_ProviderEngine) {
    _inherits(WalletConnectProvider, _ProviderEngine);

    function WalletConnectProvider(opts) {
        var _this;

        _classCallCheck(this, WalletConnectProvider);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(WalletConnectProvider).call(this, {
            pollingInterval: opts.pollingInterval || 8000
        }));
        _this.bridge = "https://bridge.walletconnect.org";
        _this.qrcode = true;
        _this.qrcodeModal = qrcode_modal_1.default;
        _this.qrcodeModalOptions = undefined;
        _this.rpc = null;
        _this.infuraId = "";
        _this.http = null;
        _this.isConnecting = false;
        _this.connected = false;
        _this.connectCallbacks = [];
        _this.accounts = [];
        _this.chainId = 1;
        _this.networkId = 1;
        _this.rpcUrl = "";

        _this.enable = function() {
            return tslib_1.__awaiter(_assertThisInitialized(_assertThisInitialized(_this)), void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                var wc;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.getWalletConnector();

                            case 2:
                                wc = _context.sent;

                                if (!wc) {
                                    _context.next = 9;
                                    break;
                                }

                                this.start();
                                this.subscribeWalletConnector();
                                return _context.abrupt("return", wc.accounts);

                            case 9:
                                throw new Error("Failed to connect to WalleConnect");

                            case 10:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        };

        _this.request = function(payload) {
            return tslib_1.__awaiter(_assertThisInitialized(_assertThisInitialized(_this)), void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                return _context2.abrupt("return", this.send(payload));

                            case 1:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        };

        _this.send = function(payload, callback) {
            return tslib_1.__awaiter(_assertThisInitialized(_assertThisInitialized(_this)), void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3() {
                var method, params;
                return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (!(typeof payload === "string")) {
                                    _context3.next = 5;
                                    break;
                                }

                                method = payload;
                                params = callback;

                                if (method === "personal_sign") {
                                    params = utils_1.parsePersonalSign(params);
                                }

                                return _context3.abrupt("return", this.sendAsyncPromise(method, params));

                            case 5:
                                payload = Object.assign({
                                    id: utils_1.payloadId(),
                                    jsonrpc: "2.0"
                                }, payload);

                                if (payload.method === "personal_sign") {
                                    payload.params = utils_1.parsePersonalSign(payload.params);
                                }

                                if (!callback) {
                                    _context3.next = 10;
                                    break;
                                }

                                this.sendAsync(payload, callback);
                                return _context3.abrupt("return");

                            case 10:
                                return _context3.abrupt("return", this.sendAsyncPromise(payload.method, payload.params));

                            case 11:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        };

        _this.onConnect = function(callback) {
            _this.connectCallbacks.push(callback);
        };

        _this.triggerConnect = function(result) {
            if (_this.connectCallbacks && _this.connectCallbacks.length) {
                _this.connectCallbacks.forEach(function(callback) {
                    return callback(result);
                });
            }
        };

        _this.bridge = opts.connector ? opts.connector.bridge : opts.bridge || "https://bridge.walletconnect.org";
        _this.qrcode = typeof opts.qrcode === "undefined" || opts.qrcode !== false;
        _this.qrcodeModal = opts.qrcodeModal || _this.qrcodeModal;
        _this.qrcodeModalOptions = opts.qrcodeModalOptions;
        _this.wc = opts.connector || new client_1.default({
            bridge: _this.bridge,
            qrcodeModal: _this.qrcode ? _this.qrcodeModal : undefined,
            qrcodeModalOptions: _this.qrcodeModalOptions,
            clientMeta: opts === null || opts === void 0 ? void 0 : opts.clientMeta
        });
        _this.rpc = opts.rpc || null;

        if (!_this.rpc && (!opts.infuraId || typeof opts.infuraId !== "string" || !opts.infuraId.trim())) {
            throw new Error("Missing one of the required parameters: rpc or infuraId");
        }

        _this.infuraId = opts.infuraId || "";
        _this.chainId = typeof opts.chainId !== "undefined" ? opts.chainId : 1;
        _this.networkId = _this.chainId;

        _this.initialize();

        return _this;
    }

    _createClass(WalletConnectProvider, [{
        key: "disconnect",
        value: function disconnect() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4() {
                return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                this.close();

                            case 1:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
        }
    }, {
        key: "close",
        value: function close() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee5() {
                var wc;
                return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return this.getWalletConnector({
                                    disableSessionCreation: true
                                });

                            case 2:
                                wc = _context5.sent;
                                _context5.next = 5;
                                return wc.killSession();

                            case 5:
                                _context5.next = 7;
                                return this.onDisconnect();

                            case 7:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));
        }
    }, {
        key: "handleRequest",
        value: function handleRequest(payload) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee6() {
                var response, result, wc;
                return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.prev = 0;
                                result = null;
                                _context6.next = 4;
                                return this.getWalletConnector();

                            case 4:
                                wc = _context6.sent;
                                _context6.t0 = payload.method;
                                _context6.next = _context6.t0 === "wc_killSession" ? 8 : _context6.t0 === "eth_accounts" ? 12 : _context6.t0 === "eth_coinbase" ? 14 : _context6.t0 === "eth_chainId" ? 16 : _context6.t0 === "net_version" ? 18 : _context6.t0 === "eth_uninstallFilter" ? 20 : 23;
                                break;

                            case 8:
                                _context6.next = 10;
                                return this.close();

                            case 10:
                                result = null;
                                return _context6.abrupt("break", 26);

                            case 12:
                                result = wc.accounts;
                                return _context6.abrupt("break", 26);

                            case 14:
                                result = wc.accounts[0];
                                return _context6.abrupt("break", 26);

                            case 16:
                                result = wc.chainId;
                                return _context6.abrupt("break", 26);

                            case 18:
                                result = wc.networkId || wc.chainId;
                                return _context6.abrupt("break", 26);

                            case 20:
                                this.sendAsync(payload, function(_) {
                                    return _;
                                });
                                result = true;
                                return _context6.abrupt("break", 26);

                            case 23:
                                _context6.next = 25;
                                return this.handleOtherRequests(payload);

                            case 25:
                                response = _context6.sent;

                            case 26:
                                if (!response) {
                                    _context6.next = 28;
                                    break;
                                }

                                return _context6.abrupt("return", response);

                            case 28:
                                return _context6.abrupt("return", this.formatResponse(payload, result));

                            case 31:
                                _context6.prev = 31;
                                _context6.t1 = _context6["catch"](0);
                                this.emit("error", _context6.t1);
                                throw _context6.t1;

                            case 35:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, this, [
                    [0, 31]
                ]);
            }));
        }
    }, {
        key: "handleOtherRequests",
        value: function handleOtherRequests(payload) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee7() {
                var wc, result;
                return _regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                if (!(!utils_1.signingMethods.includes(payload.method) && payload.method.startsWith("eth_"))) {
                                    _context7.next = 2;
                                    break;
                                }

                                return _context7.abrupt("return", this.handleReadRequests(payload));

                            case 2:
                                _context7.next = 4;
                                return this.getWalletConnector();

                            case 4:
                                wc = _context7.sent;
                                _context7.next = 7;
                                return wc.sendCustomRequest(payload);

                            case 7:
                                result = _context7.sent;
                                return _context7.abrupt("return", this.formatResponse(payload, result));

                            case 9:
                            case "end":
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));
        }
    }, {
        key: "handleReadRequests",
        value: function handleReadRequests(payload) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee8() {
                var error;
                return _regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                if (this.http) {
                                    _context8.next = 4;
                                    break;
                                }

                                error = new Error("HTTP Connection not available");
                                this.emit("error", error);
                                throw error;

                            case 4:
                                return _context8.abrupt("return", this.http.send(payload));

                            case 5:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));
        }
    }, {
        key: "formatResponse",
        value: function formatResponse(payload, result) {
            return {
                id: payload.id,
                jsonrpc: payload.jsonrpc,
                result: result
            };
        }
    }, {
        key: "getWalletConnector",
        value: function getWalletConnector() {
            var _this2 = this;

            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var _opts$disableSessionC = opts.disableSessionCreation,
                disableSessionCreation = _opts$disableSessionC === void 0 ? false : _opts$disableSessionC;
            return new Promise(function(resolve, reject) {
                var wc = _this2.wc;

                if (_this2.isConnecting) {
                    _this2.onConnect(function(x) {
                        return resolve(x);
                    });
                } else if (!wc.connected && !disableSessionCreation) {
                    _this2.isConnecting = true;
                    var sessionRequestOpions = _this2.chainId ? {
                        chainId: _this2.chainId
                    } : undefined;
                    wc.on("modal_closed", function() {
                        reject(new Error("User closed modal"));
                    });
                    wc.createSession(sessionRequestOpions).then(function() {
                        wc.on("connect", function(error, payload) {
                            if (error) {
                                _this2.isConnecting = false;
                                return reject(error);
                            }

                            _this2.isConnecting = false;
                            _this2.connected = true;

                            if (payload) {
                                _this2.updateState(payload.params[0]);
                            }

                            _this2.emit("connect");

                            _this2.triggerConnect(wc);

                            resolve(wc);
                        });
                    }).catch(function(error) {
                        _this2.isConnecting = false;
                        reject(error);
                    });
                } else {
                    if (!_this2.connected) {
                        _this2.connected = true;

                        _this2.updateState(wc.session);
                    }

                    resolve(wc);
                }
            });
        }
    }, {
        key: "subscribeWalletConnector",
        value: function subscribeWalletConnector() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee9() {
                var _this3 = this;

                var wc;
                return _regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                _context9.next = 2;
                                return this.getWalletConnector();

                            case 2:
                                wc = _context9.sent;
                                wc.on("disconnect", function(error) {
                                    if (error) {
                                        _this3.emit("error", error);

                                        return;
                                    }

                                    _this3.onDisconnect();
                                });
                                wc.on("session_update", function(error, payload) {
                                    if (error) {
                                        _this3.emit("error", error);

                                        return;
                                    }

                                    _this3.updateState(payload.params[0]);
                                });

                            case 5:
                            case "end":
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));
        }
    }, {
        key: "onDisconnect",
        value: function onDisconnect() {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee10() {
                return _regeneratorRuntime.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                _context10.next = 2;
                                return this.stop();

                            case 2:
                                this.emit("close", 1000, "Connection closed");
                                this.emit("disconnect", 1000, "Connection disconnected");

                            case 4:
                            case "end":
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));
        }
    }, {
        key: "updateState",
        value: function updateState(sessionParams) {
            return tslib_1.__awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee11() {
                var accounts, chainId, networkId, rpcUrl;
                return _regeneratorRuntime.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                accounts = sessionParams.accounts, chainId = sessionParams.chainId, networkId = sessionParams.networkId, rpcUrl = sessionParams.rpcUrl;

                                if (!this.accounts || accounts && this.accounts !== accounts) {
                                    this.accounts = accounts;
                                    this.emit("accountsChanged", accounts);
                                }

                                if (!this.chainId || chainId && this.chainId !== chainId) {
                                    this.chainId = chainId;
                                    this.emit("chainChanged", chainId);
                                }

                                if (!this.networkId || networkId && this.networkId !== networkId) {
                                    this.networkId = networkId;
                                    this.emit("networkChanged", networkId);
                                }

                                this.updateRpcUrl(this.chainId, rpcUrl || "");

                            case 5:
                            case "end":
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));
        }
    }, {
        key: "updateRpcUrl",
        value: function updateRpcUrl(chainId) {
            var rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var infuraNetworks = {
                1: "mainnet",
                3: "ropsten",
                4: "rinkeby",
                5: "goerli",
                42: "kovan"
            };
            var network = infuraNetworks[chainId];

            if (!rpcUrl) {
                if (this.rpc && this.rpc[chainId]) {
                    rpcUrl = this.rpc[chainId];
                } else if (network) {
                    rpcUrl = "https://".concat(network, ".infura.io/v3/").concat(this.infuraId);
                }
            }

            if (rpcUrl) {
                this.rpcUrl = rpcUrl;
                this.updateHttpConnection();
            } else {
                this.emit("error", new Error("No RPC Url available for chainId: ".concat(chainId)));
            }
        }
    }, {
        key: "updateHttpConnection",
        value: function updateHttpConnection() {
            var _this4 = this;

            if (this.rpcUrl) {
                this.http = new http_connection_1.default(this.rpcUrl);
                this.http.on("payload", function(payload) {
                    return _this4.emit("payload", payload);
                });
                this.http.on("error", function(error) {
                    return _this4.emit("error", error);
                });
            }
        }
    }, {
        key: "sendAsyncPromise",
        value: function sendAsyncPromise(method, params) {
            var _this5 = this;

            return new Promise(function(resolve, reject) {
                _this5.sendAsync({
                    id: utils_1.payloadId(),
                    jsonrpc: "2.0",
                    method: method,
                    params: params || []
                }, function(error, response) {
                    if (error) {
                        reject(error);
                        return;
                    }

                    resolve(response.result);
                });
            });
        }
    }, {
        key: "initialize",
        value: function initialize() {
            var _this6 = this;

            this.updateRpcUrl(this.chainId);
            this.addProvider(new FixtureSubprovider({
                eth_hashrate: "0x00",
                eth_mining: false,
                eth_syncing: true,
                net_listening: true,
                web3_clientVersion: "WalletConnect/v1.x.x/javascript"
            }));
            this.addProvider(new CacheSubprovider());
            this.addProvider(new SubscriptionsSubprovider());
            this.addProvider(new FilterSubprovider());
            this.addProvider(new NonceSubprovider());
            this.addProvider(new HookedWalletSubprovider(this.configWallet()));
            this.addProvider({
                handleRequest: function handleRequest(payload, next, end) {
                    return tslib_1.__awaiter(_this6, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee12() {
                        var _yield$this$handleReq, result;

                        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
                            while (1) {
                                switch (_context12.prev = _context12.next) {
                                    case 0:
                                        _context12.prev = 0;
                                        _context12.next = 3;
                                        return this.handleRequest(payload);

                                    case 3:
                                        _yield$this$handleReq = _context12.sent;
                                        result = _yield$this$handleReq.result;
                                        end(null, result);
                                        _context12.next = 11;
                                        break;

                                    case 8:
                                        _context12.prev = 8;
                                        _context12.t0 = _context12["catch"](0);
                                        end(_context12.t0);

                                    case 11:
                                    case "end":
                                        return _context12.stop();
                                }
                            }
                        }, _callee12, this, [
                            [0, 8]
                        ]);
                    }));
                },
                setEngine: function setEngine(_) {
                    return _;
                }
            });
        }
    }, {
        key: "configWallet",
        value: function configWallet() {
            var _this7 = this;

            return {
                getAccounts: function getAccounts(cb) {
                    return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee13() {
                        var wc, accounts;
                        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
                            while (1) {
                                switch (_context13.prev = _context13.next) {
                                    case 0:
                                        _context13.prev = 0;
                                        _context13.next = 3;
                                        return this.getWalletConnector();

                                    case 3:
                                        wc = _context13.sent;
                                        accounts = wc.accounts;

                                        if (accounts && accounts.length) {
                                            cb(null, accounts);
                                        } else {
                                            cb(new Error("Failed to get accounts"));
                                        }

                                        _context13.next = 11;
                                        break;

                                    case 8:
                                        _context13.prev = 8;
                                        _context13.t0 = _context13["catch"](0);
                                        cb(_context13.t0);

                                    case 11:
                                    case "end":
                                        return _context13.stop();
                                }
                            }
                        }, _callee13, this, [
                            [0, 8]
                        ]);
                    }));
                },
                processMessage: function processMessage(msgParams, cb) {
                    return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee14() {
                        var wc, result;
                        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
                            while (1) {
                                switch (_context14.prev = _context14.next) {
                                    case 0:
                                        _context14.prev = 0;
                                        _context14.next = 3;
                                        return this.getWalletConnector();

                                    case 3:
                                        wc = _context14.sent;
                                        _context14.next = 6;
                                        return wc.signMessage([msgParams.from, msgParams.data]);

                                    case 6:
                                        result = _context14.sent;
                                        cb(null, result);
                                        _context14.next = 13;
                                        break;

                                    case 10:
                                        _context14.prev = 10;
                                        _context14.t0 = _context14["catch"](0);
                                        cb(_context14.t0);

                                    case 13:
                                    case "end":
                                        return _context14.stop();
                                }
                            }
                        }, _callee14, this, [
                            [0, 10]
                        ]);
                    }));
                },
                processPersonalMessage: function processPersonalMessage(msgParams, cb) {
                    return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee15() {
                        var wc, result;
                        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
                            while (1) {
                                switch (_context15.prev = _context15.next) {
                                    case 0:
                                        _context15.prev = 0;
                                        _context15.next = 3;
                                        return this.getWalletConnector();

                                    case 3:
                                        wc = _context15.sent;
                                        _context15.next = 6;
                                        return wc.signPersonalMessage([msgParams.data, msgParams.from]);

                                    case 6:
                                        result = _context15.sent;
                                        cb(null, result);
                                        _context15.next = 13;
                                        break;

                                    case 10:
                                        _context15.prev = 10;
                                        _context15.t0 = _context15["catch"](0);
                                        cb(_context15.t0);

                                    case 13:
                                    case "end":
                                        return _context15.stop();
                                }
                            }
                        }, _callee15, this, [
                            [0, 10]
                        ]);
                    }));
                },
                processSignTransaction: function processSignTransaction(txParams, cb) {
                    return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee16() {
                        var wc, result;
                        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
                            while (1) {
                                switch (_context16.prev = _context16.next) {
                                    case 0:
                                        _context16.prev = 0;
                                        _context16.next = 3;
                                        return this.getWalletConnector();

                                    case 3:
                                        wc = _context16.sent;
                                        _context16.next = 6;
                                        return wc.signTransaction(txParams);

                                    case 6:
                                        result = _context16.sent;
                                        cb(null, result);
                                        _context16.next = 13;
                                        break;

                                    case 10:
                                        _context16.prev = 10;
                                        _context16.t0 = _context16["catch"](0);
                                        cb(_context16.t0);

                                    case 13:
                                    case "end":
                                        return _context16.stop();
                                }
                            }
                        }, _callee16, this, [
                            [0, 10]
                        ]);
                    }));
                },
                processTransaction: function processTransaction(txParams, cb) {
                    return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee17() {
                        var wc, result;
                        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
                            while (1) {
                                switch (_context17.prev = _context17.next) {
                                    case 0:
                                        _context17.prev = 0;
                                        _context17.next = 3;
                                        return this.getWalletConnector();

                                    case 3:
                                        wc = _context17.sent;
                                        _context17.next = 6;
                                        return wc.sendTransaction(txParams);

                                    case 6:
                                        result = _context17.sent;
                                        cb(null, result);
                                        _context17.next = 13;
                                        break;

                                    case 10:
                                        _context17.prev = 10;
                                        _context17.t0 = _context17["catch"](0);
                                        cb(_context17.t0);

                                    case 13:
                                    case "end":
                                        return _context17.stop();
                                }
                            }
                        }, _callee17, this, [
                            [0, 10]
                        ]);
                    }));
                },
                processTypedMessage: function processTypedMessage(msgParams, cb) {
                    return tslib_1.__awaiter(_this7, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee18() {
                        var wc, result;
                        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
                            while (1) {
                                switch (_context18.prev = _context18.next) {
                                    case 0:
                                        _context18.prev = 0;
                                        _context18.next = 3;
                                        return this.getWalletConnector();

                                    case 3:
                                        wc = _context18.sent;
                                        _context18.next = 6;
                                        return wc.signTypedData([msgParams.from, msgParams.data]);

                                    case 6:
                                        result = _context18.sent;
                                        cb(null, result);
                                        _context18.next = 13;
                                        break;

                                    case 10:
                                        _context18.prev = 10;
                                        _context18.t0 = _context18["catch"](0);
                                        cb(_context18.t0);

                                    case 13:
                                    case "end":
                                        return _context18.stop();
                                }
                            }
                        }, _callee18, this, [
                            [0, 10]
                        ]);
                    }));
                }
            };
        }
    }, {
        key: "isWalletConnect",
        get: function get() {
            return true;
        }
    }, {
        key: "connector",
        get: function get() {
            return this.wc;
        }
    }, {
        key: "walletMeta",
        get: function get() {
            return this.wc.peerMeta;
        }
    }]);

    return WalletConnectProvider;
}(ProviderEngine);

exports.default = WalletConnectProvider;