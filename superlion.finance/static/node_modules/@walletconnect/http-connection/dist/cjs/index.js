"use strict";

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

Object.defineProperty(exports, "__esModule", {
    value: true
});

var tslib_1 = require("tslib");

var eventemitter3_1 = tslib_1.__importDefault(require("eventemitter3"));

var xhr2_cookies_1 = require("xhr2-cookies");

var utils_1 = require("@walletconnect/utils");

var XHR = utils_1.getFromWindow("XMLHttpRequest") || xhr2_cookies_1.XMLHttpRequest;

var HTTPConnection = /*#__PURE__*/ function(_eventemitter3_1$defa) {
    _inherits(HTTPConnection, _eventemitter3_1$defa);

    function HTTPConnection(url) {
        var _this;

        _classCallCheck(this, HTTPConnection);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(HTTPConnection).call(this));
        _this.url = url;
        return _this;
    }

    _createClass(HTTPConnection, [{
        key: "formatError",
        value: function formatError(payload, message) {
            var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
            return {
                error: {
                    message: message,
                    code: code
                },
                id: payload.id,
                jsonrpc: payload.jsonrpc
            };
        }
    }, {
        key: "send",
        value: function send(payload, internal) {
            var _this2 = this;

            return new Promise(function(resolve) {
                if (payload.method === "eth_subscribe") {
                    var error = _this2.formatError(payload, "Subscriptions are not supported by this HTTP endpoint");

                    _this2.emit("error", error);

                    return resolve(error);
                }

                var xhr = new XHR();
                var responded = false;

                var res = function res(err, result) {
                    if (!responded) {
                        xhr.abort();
                        responded = true;

                        if (internal) {
                            internal(err, result);
                        } else {
                            var id = payload.id,
                                jsonrpc = payload.jsonrpc;
                            var response = err ? {
                                id: id,
                                jsonrpc: jsonrpc,
                                error: {
                                    message: err.message,
                                    code: err.code
                                }
                            } : {
                                id: id,
                                jsonrpc: jsonrpc,
                                result: result
                            };

                            _this2.emit("payload", response);

                            resolve(response);
                        }
                    }
                };

                xhr.open("POST", _this2.url, true);
                xhr.setRequestHeader("Content-Type", "application/json");
                xhr.timeout = 60 * 1000;
                xhr.onerror = res;
                xhr.ontimeout = res;

                xhr.onreadystatechange = function() {
                    if (xhr.readyState === 4) {
                        try {
                            var response = JSON.parse(xhr.responseText);
                            res(response.error, response.result);
                        } catch (e) {
                            res(e);
                        }
                    }
                };

                xhr.send(JSON.stringify(payload));
            });
        }
    }]);

    return HTTPConnection;
}(eventemitter3_1.default);

exports.default = HTTPConnection;