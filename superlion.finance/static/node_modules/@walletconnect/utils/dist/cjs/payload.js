"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.formatRpcError = exports.promisify = void 0;

var tslib_1 = require("tslib");

function promisify(originalFn, thisArg) {
    var _this = this;

    var promisifiedFunction = function promisifiedFunction() {
        for (var _len = arguments.length, callArgs = new Array(_len), _key = 0; _key < _len; _key++) {
            callArgs[_key] = arguments[_key];
        }

        return tslib_1.__awaiter(_this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            return _context.abrupt("return", new Promise(function(resolve, reject) {
                                var callback = function callback(err, data) {
                                    if (err === null || typeof err === "undefined") {
                                        reject(err);
                                    }

                                    resolve(data);
                                };

                                originalFn.apply(thisArg, [].concat(callArgs, [callback]));
                            }));

                        case 1:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee);
        }));
    };

    return promisifiedFunction;
}

exports.promisify = promisify;

function formatRpcError(error) {
    var message = error.message || "Failed or Rejected Request";
    var code = -32000;

    if (error && !error.code) {
        switch (message) {
            case "Parse error":
                code = -32700;
                break;

            case "Invalid request":
                code = -32600;
                break;

            case "Method not found":
                code = -32601;
                break;

            case "Invalid params":
                code = -32602;
                break;

            case "Internal error":
                code = -32603;
                break;

            default:
                code = -32000;
                break;
        }
    }

    var result = {
        code: code,
        message: message
    };
    return result;
}

exports.formatRpcError = formatRpcError;