var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var BaseFilter = require('./base-filter');

var getBlocksForRange = require('./getBlocksForRange');

var _require = require('./hexUtils'),
    incrementHexInt = _require.incrementHexInt;

var BlockFilter = /*#__PURE__*/ function(_BaseFilter) {
    "use strict";

    _inherits(BlockFilter, _BaseFilter);

    function BlockFilter(_ref) {
        var _this;

        var provider = _ref.provider,
            params = _ref.params;

        _classCallCheck(this, BlockFilter);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(BlockFilter).call(this));
        _this.type = 'block';
        _this.provider = provider;
        return _this;
    }

    _createClass(BlockFilter, [{
        key: "update",
        value: function() {
            var _update = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(_ref2) {
                var oldBlock, newBlock, toBlock, fromBlock, blockBodies, blockHashes;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;
                                toBlock = newBlock;
                                fromBlock = incrementHexInt(oldBlock);
                                _context.next = 5;
                                return getBlocksForRange({
                                    provider: this.provider,
                                    fromBlock: fromBlock,
                                    toBlock: toBlock
                                });

                            case 5:
                                blockBodies = _context.sent;
                                blockHashes = blockBodies.map(function(block) {
                                    return block.hash;
                                });
                                this.addResults(blockHashes);

                            case 8:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function update(_x) {
                return _update.apply(this, arguments);
            }

            return update;
        }()
    }]);

    return BlockFilter;
}(BaseFilter);

module.exports = BlockFilter;