var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var Mutex = require('async-mutex').Mutex;

var _require = require('json-rpc-engine'),
    createAsyncMiddleware = _require.createAsyncMiddleware;

var createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');

var LogFilter = require('./log-filter.js');

var BlockFilter = require('./block-filter.js');

var TxFilter = require('./tx-filter.js');

var _require2 = require('./hexUtils'),
    intToHex = _require2.intToHex,
    hexToInt = _require2.hexToInt;

module.exports = createEthFilterMiddleware;

function createEthFilterMiddleware(_ref) {
    var blockTracker = _ref.blockTracker,
        provider = _ref.provider;
    // create filter collection
    var filterIndex = 0;
    var filters = {}; // create update mutex

    var mutex = new Mutex();
    var waitForFree = mutexMiddlewareWrapper({
        mutex: mutex
    });
    var middleware = createJsonRpcMiddleware({
        // install filters
        eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),
        eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),
        eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),
        // uninstall filters
        eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),
        // checking filter changes
        eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),
        eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))
    }); // setup filter updating and destroy handler

    var filterUpdater = /*#__PURE__*/ function() {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2(_ref2) {
            var oldBlock, newBlock, releaseLock;
            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;

                            if (!(filters.length === 0)) {
                                _context2.next = 3;
                                break;
                            }

                            return _context2.abrupt("return");

                        case 3:
                            _context2.next = 5;
                            return mutex.acquire();

                        case 5:
                            releaseLock = _context2.sent;
                            _context2.prev = 6;
                            _context2.next = 9;
                            return Promise.all(objValues(filters).map( /*#__PURE__*/ function() {
                                var _ref4 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(filter) {
                                    return _regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    _context.prev = 0;
                                                    _context.next = 3;
                                                    return filter.update({
                                                        oldBlock: oldBlock,
                                                        newBlock: newBlock
                                                    });

                                                case 3:
                                                    _context.next = 8;
                                                    break;

                                                case 5:
                                                    _context.prev = 5;
                                                    _context.t0 = _context["catch"](0);
                                                    // handle each error individually so filter update errors don't affect other filters
                                                    console.error(_context.t0);

                                                case 8:
                                                case "end":
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, null, [
                                        [0, 5]
                                    ]);
                                }));

                                return function(_x2) {
                                    return _ref4.apply(this, arguments);
                                };
                            }()));

                        case 9:
                            _context2.next = 14;
                            break;

                        case 11:
                            _context2.prev = 11;
                            _context2.t0 = _context2["catch"](6);
                            // log error so we don't skip the releaseLock
                            console.error(_context2.t0);

                        case 14:
                            // unlock update reads
                            releaseLock();

                        case 15:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, null, [
                [6, 11]
            ]);
        }));

        return function filterUpdater(_x) {
            return _ref3.apply(this, arguments);
        };
    }(); // expose filter methods directly


    middleware.newLogFilter = newLogFilter;
    middleware.newBlockFilter = newBlockFilter;
    middleware.newPendingTransactionFilter = newPendingTransactionFilter;
    middleware.uninstallFilter = uninstallFilterHandler;
    middleware.getFilterChanges = getFilterChanges;
    middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup

    middleware.destroy = function() {
        uninstallAllFilters();
    };

    return middleware; //
    // new filters
    //

    function newLogFilter(_x3) {
        return _newLogFilter.apply(this, arguments);
    }

    function _newLogFilter() {
        _newLogFilter = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3(params) {
            var filter, filterIndex;
            return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            filter = new LogFilter({
                                provider: provider,
                                params: params
                            });
                            _context3.next = 3;
                            return installFilter(filter);

                        case 3:
                            filterIndex = _context3.sent;
                            return _context3.abrupt("return", filter);

                        case 5:
                        case "end":
                            return _context3.stop();
                    }
                }
            }, _callee3);
        }));
        return _newLogFilter.apply(this, arguments);
    }

    function newBlockFilter() {
        return _newBlockFilter.apply(this, arguments);
    }

    function _newBlockFilter() {
        _newBlockFilter = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4() {
            var filter, filterIndex;
            return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            filter = new BlockFilter({
                                provider: provider
                            });
                            _context4.next = 3;
                            return installFilter(filter);

                        case 3:
                            filterIndex = _context4.sent;
                            return _context4.abrupt("return", filter);

                        case 5:
                        case "end":
                            return _context4.stop();
                    }
                }
            }, _callee4);
        }));
        return _newBlockFilter.apply(this, arguments);
    }

    function newPendingTransactionFilter() {
        return _newPendingTransactionFilter.apply(this, arguments);
    } //
    // get filter changes
    //


    function _newPendingTransactionFilter() {
        _newPendingTransactionFilter = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee5() {
            var filter, filterIndex;
            return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            filter = new TxFilter({
                                provider: provider
                            });
                            _context5.next = 3;
                            return installFilter(filter);

                        case 3:
                            filterIndex = _context5.sent;
                            return _context5.abrupt("return", filter);

                        case 5:
                        case "end":
                            return _context5.stop();
                    }
                }
            }, _callee5);
        }));
        return _newPendingTransactionFilter.apply(this, arguments);
    }

    function getFilterChanges(_x4) {
        return _getFilterChanges.apply(this, arguments);
    }

    function _getFilterChanges() {
        _getFilterChanges = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee6(filterIndexHex) {
            var filterIndex, filter, results;
            return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            filterIndex = hexToInt(filterIndexHex);
                            filter = filters[filterIndex];

                            if (filter) {
                                _context6.next = 4;
                                break;
                            }

                            throw new Error("No filter for index \"".concat(filterIndex, "\""));

                        case 4:
                            results = filter.getChangesAndClear();
                            return _context6.abrupt("return", results);

                        case 6:
                        case "end":
                            return _context6.stop();
                    }
                }
            }, _callee6);
        }));
        return _getFilterChanges.apply(this, arguments);
    }

    function getFilterLogs(_x5) {
        return _getFilterLogs.apply(this, arguments);
    } //
    // remove filters
    //


    function _getFilterLogs() {
        _getFilterLogs = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee7(filterIndexHex) {
            var filterIndex, filter;
            return _regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            filterIndex = hexToInt(filterIndexHex);
                            filter = filters[filterIndex];

                            if (filter) {
                                _context7.next = 4;
                                break;
                            }

                            throw new Error("No filter for index \"".concat(filterIndex, "\""));

                        case 4:
                            // only return results for log filters
                            if (filter.type === 'log') {
                                results = filter.getAllResults();
                            } else {
                                results = [];
                            }

                            return _context7.abrupt("return", results);

                        case 6:
                        case "end":
                            return _context7.stop();
                    }
                }
            }, _callee7);
        }));
        return _getFilterLogs.apply(this, arguments);
    }

    function uninstallFilterHandler(_x6) {
        return _uninstallFilterHandler.apply(this, arguments);
    } //
    // utils
    //


    function _uninstallFilterHandler() {
        _uninstallFilterHandler = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee8(filterIndexHex) {
            var filterIndex, filter, result;
            return _regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            // check filter exists
                            filterIndex = hexToInt(filterIndexHex);
                            filter = filters[filterIndex];
                            result = Boolean(filter); // uninstall filter

                            if (!result) {
                                _context8.next = 6;
                                break;
                            }

                            _context8.next = 6;
                            return uninstallFilter(filterIndex);

                        case 6:
                            return _context8.abrupt("return", result);

                        case 7:
                        case "end":
                            return _context8.stop();
                    }
                }
            }, _callee8);
        }));
        return _uninstallFilterHandler.apply(this, arguments);
    }

    function installFilter(_x7) {
        return _installFilter.apply(this, arguments);
    }

    function _installFilter() {
        _installFilter = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee9(filter) {
            var prevFilterCount, currentBlock, newFilterCount;
            return _regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            prevFilterCount = objValues(filters).length; // install filter

                            _context9.next = 3;
                            return blockTracker.getLatestBlock();

                        case 3:
                            currentBlock = _context9.sent;
                            _context9.next = 6;
                            return filter.initialize({
                                currentBlock: currentBlock
                            });

                        case 6:
                            filterIndex++;
                            filters[filterIndex] = filter;
                            filter.id = filterIndex;
                            filter.idHex = intToHex(filterIndex); // update block tracker subs

                            newFilterCount = objValues(filters).length;
                            updateBlockTrackerSubs({
                                prevFilterCount: prevFilterCount,
                                newFilterCount: newFilterCount
                            });
                            return _context9.abrupt("return", filterIndex);

                        case 13:
                        case "end":
                            return _context9.stop();
                    }
                }
            }, _callee9);
        }));
        return _installFilter.apply(this, arguments);
    }

    function uninstallFilter(_x8) {
        return _uninstallFilter.apply(this, arguments);
    }

    function _uninstallFilter() {
        _uninstallFilter = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee10(filterIndex) {
            var prevFilterCount, newFilterCount;
            return _regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            prevFilterCount = objValues(filters).length;
                            delete filters[filterIndex]; // update block tracker subs

                            newFilterCount = objValues(filters).length;
                            updateBlockTrackerSubs({
                                prevFilterCount: prevFilterCount,
                                newFilterCount: newFilterCount
                            });

                        case 4:
                        case "end":
                            return _context10.stop();
                    }
                }
            }, _callee10);
        }));
        return _uninstallFilter.apply(this, arguments);
    }

    function uninstallAllFilters() {
        return _uninstallAllFilters.apply(this, arguments);
    }

    function _uninstallAllFilters() {
        _uninstallAllFilters = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee11() {
            var prevFilterCount;
            return _regeneratorRuntime.wrap(function _callee11$(_context11) {
                while (1) {
                    switch (_context11.prev = _context11.next) {
                        case 0:
                            prevFilterCount = objValues(filters).length;
                            filters = {}; // update block tracker subs

                            updateBlockTrackerSubs({
                                prevFilterCount: prevFilterCount,
                                newFilterCount: 0
                            });

                        case 3:
                        case "end":
                            return _context11.stop();
                    }
                }
            }, _callee11);
        }));
        return _uninstallAllFilters.apply(this, arguments);
    }

    function updateBlockTrackerSubs(_ref5) {
        var prevFilterCount = _ref5.prevFilterCount,
            newFilterCount = _ref5.newFilterCount;

        // subscribe
        if (prevFilterCount === 0 && newFilterCount > 0) {
            blockTracker.on('sync', filterUpdater);
            return;
        } // unsubscribe


        if (prevFilterCount > 0 && newFilterCount === 0) {
            blockTracker.removeListener('sync', filterUpdater);
            return;
        }
    }
} // helper for turning filter constructors into rpc middleware


function toFilterCreationMiddleware(createFilterFn) {
    return toAsyncRpcMiddleware( /*#__PURE__*/ _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee12() {
        var filter,
            result,
            _args12 = arguments;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
                switch (_context12.prev = _context12.next) {
                    case 0:
                        _context12.next = 2;
                        return createFilterFn.apply(void 0, _args12);

                    case 2:
                        filter = _context12.sent;
                        result = intToHex(filter.id);
                        return _context12.abrupt("return", result);

                    case 5:
                    case "end":
                        return _context12.stop();
                }
            }
        }, _callee12);
    })));
} // helper for pulling out req.params and setting res.result


function toAsyncRpcMiddleware(asyncFn) {
    return createAsyncMiddleware( /*#__PURE__*/ function() {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee13(req, res) {
            var result;
            return _regeneratorRuntime.wrap(function _callee13$(_context13) {
                while (1) {
                    switch (_context13.prev = _context13.next) {
                        case 0:
                            _context13.next = 2;
                            return asyncFn.apply(null, req.params);

                        case 2:
                            result = _context13.sent;
                            res.result = result;

                        case 4:
                        case "end":
                            return _context13.stop();
                    }
                }
            }, _callee13);
        }));

        return function(_x9, _x10) {
            return _ref7.apply(this, arguments);
        };
    }());
}

function mutexMiddlewareWrapper(_ref8) {
    var mutex = _ref8.mutex;
    return function(middleware) {
        return /*#__PURE__*/ function() {
            var _ref9 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee14(req, res, next, end) {
                var releaseLock;
                return _regeneratorRuntime.wrap(function _callee14$(_context14) {
                    while (1) {
                        switch (_context14.prev = _context14.next) {
                            case 0:
                                _context14.next = 2;
                                return mutex.acquire();

                            case 2:
                                releaseLock = _context14.sent;
                                releaseLock();
                                middleware(req, res, next, end);

                            case 5:
                            case "end":
                                return _context14.stop();
                        }
                    }
                }, _callee14);
            }));

            return function(_x11, _x12, _x13, _x14) {
                return _ref9.apply(this, arguments);
            };
        }();
    };
}

function objValues(obj, fn) {
    var values = [];

    for (var key in obj) {
        values.push(obj[key]);
    }

    return values;
}