module.exports = {
    minBlockRef: minBlockRef,
    maxBlockRef: maxBlockRef,
    sortBlockRefs: sortBlockRefs,
    bnToHex: bnToHex,
    blockRefIsNumber: blockRefIsNumber,
    hexToInt: hexToInt,
    incrementHexInt: incrementHexInt,
    intToHex: intToHex,
    unsafeRandomBytes: unsafeRandomBytes
};

function minBlockRef() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
        refs[_key] = arguments[_key];
    }

    var sortedRefs = sortBlockRefs(refs);
    return sortedRefs[0];
}

function maxBlockRef() {
    for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        refs[_key2] = arguments[_key2];
    }

    var sortedRefs = sortBlockRefs(refs);
    return sortedRefs[sortedRefs.length - 1];
}

function sortBlockRefs(refs) {
    return refs.sort(function(refA, refB) {
        if (refA === 'latest' || refB === 'earliest') return 1;
        if (refB === 'latest' || refA === 'earliest') return -1;
        return hexToInt(refA) - hexToInt(refB);
    });
}

function bnToHex(bn) {
    return '0x' + bn.toString(16);
}

function blockRefIsNumber(blockRef) {
    return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef);
}

function hexToInt(hexString) {
    if (hexString === undefined || hexString === null) return hexString;
    return Number.parseInt(hexString, 16);
}

function incrementHexInt(hexString) {
    if (hexString === undefined || hexString === null) return hexString;
    var value = hexToInt(hexString);
    return intToHex(value + 1);
}

function intToHex(int) {
    if (int === undefined || int === null) return int;
    var hexString = int.toString(16);
    var needsLeftPad = hexString.length % 2;
    if (needsLeftPad) hexString = '0' + hexString;
    return '0x' + hexString;
}

function unsafeRandomBytes(byteCount) {
    var result = '0x';

    for (var i = 0; i < byteCount; i++) {
        result += unsafeRandomNibble();
        result += unsafeRandomNibble();
    }

    return result;
}

function unsafeRandomNibble() {
    return Math.floor(Math.random() * 16).toString(16);
}