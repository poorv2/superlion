"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _slicedToArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true,
        didErr = false,
        err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally {
                if (didErr) throw err;
            }
        }
    };
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JsonRpcEngine = void 0;

var safe_event_emitter_1 = __importDefault(require("@metamask/safe-event-emitter"));

var eth_rpc_errors_1 = require("eth-rpc-errors");
/**
 * A JSON-RPC request and response processor.
 * Give it a stack of middleware, pass it requests, and get back responses.
 */


var JsonRpcEngine = /*#__PURE__*/ function(_safe_event_emitter_) {
    _inherits(JsonRpcEngine, _safe_event_emitter_);

    function JsonRpcEngine() {
        var _this;

        _classCallCheck(this, JsonRpcEngine);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(JsonRpcEngine).call(this));
        _this._middleware = [];
        return _this;
    }
    /**
     * Add a middleware function to the engine's middleware stack.
     *
     * @param middleware - The middleware function to add.
     */


    _createClass(JsonRpcEngine, [{
        key: "push",
        value: function push(middleware) {
            this._middleware.push(middleware);
        }
    }, {
        key: "handle",
        value: function handle(req, cb) {
            if (cb && typeof cb !== 'function') {
                throw new Error('"callback" must be a function if provided.');
            }

            if (Array.isArray(req)) {
                if (cb) {
                    return this._handleBatch(req, cb);
                }

                return this._handleBatch(req);
            }

            if (cb) {
                return this._handle(req, cb);
            }

            return this._promiseHandle(req);
        }
        /**
         * Returns this engine as a middleware function that can be pushed to other
         * engines.
         *
         * @returns This engine as a middleware function.
         */

    }, {
        key: "asMiddleware",
        value: function asMiddleware() {
            var _this2 = this;

            return /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2(req, res, next, end) {
                    var _yield$JsonRpcEngine$, _yield$JsonRpcEngine$2, middlewareError, isComplete, returnHandlers;

                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    _context2.prev = 0;
                                    _context2.next = 3;
                                    return JsonRpcEngine._runAllMiddleware(req, res, _this2._middleware);

                                case 3:
                                    _yield$JsonRpcEngine$ = _context2.sent;
                                    _yield$JsonRpcEngine$2 = _slicedToArray(_yield$JsonRpcEngine$, 3);
                                    middlewareError = _yield$JsonRpcEngine$2[0];
                                    isComplete = _yield$JsonRpcEngine$2[1];
                                    returnHandlers = _yield$JsonRpcEngine$2[2];

                                    if (!isComplete) {
                                        _context2.next = 12;
                                        break;
                                    }

                                    _context2.next = 11;
                                    return JsonRpcEngine._runReturnHandlers(returnHandlers);

                                case 11:
                                    return _context2.abrupt("return", end(middlewareError));

                                case 12:
                                    return _context2.abrupt("return", next( /*#__PURE__*/ function() {
                                        var _ref2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(handlerCallback) {
                                            return _regeneratorRuntime.wrap(function _callee$(_context) {
                                                while (1) {
                                                    switch (_context.prev = _context.next) {
                                                        case 0:
                                                            _context.prev = 0;
                                                            _context.next = 3;
                                                            return JsonRpcEngine._runReturnHandlers(returnHandlers);

                                                        case 3:
                                                            _context.next = 8;
                                                            break;

                                                        case 5:
                                                            _context.prev = 5;
                                                            _context.t0 = _context["catch"](0);
                                                            return _context.abrupt("return", handlerCallback(_context.t0));

                                                        case 8:
                                                            return _context.abrupt("return", handlerCallback());

                                                        case 9:
                                                        case "end":
                                                            return _context.stop();
                                                    }
                                                }
                                            }, _callee, null, [
                                                [0, 5]
                                            ]);
                                        }));

                                        return function(_x5) {
                                            return _ref2.apply(this, arguments);
                                        };
                                    }()));

                                case 15:
                                    _context2.prev = 15;
                                    _context2.t0 = _context2["catch"](0);
                                    return _context2.abrupt("return", end(_context2.t0));

                                case 18:
                                case "end":
                                    return _context2.stop();
                            }
                        }
                    }, _callee2, null, [
                        [0, 15]
                    ]);
                }));

                return function(_x, _x2, _x3, _x4) {
                    return _ref.apply(this, arguments);
                };
            }();
        }
    }, {
        key: "_handleBatch",
        value: function() {
            var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3(reqs, cb) {
                var responses;
                return _regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.prev = 0;
                                _context3.next = 3;
                                return Promise.all( // 1. Begin executing each request in the order received
                                    reqs.map(this._promiseHandle.bind(this)));

                            case 3:
                                responses = _context3.sent;

                                if (!cb) {
                                    _context3.next = 6;
                                    break;
                                }

                                return _context3.abrupt("return", cb(null, responses));

                            case 6:
                                return _context3.abrupt("return", responses);

                            case 9:
                                _context3.prev = 9;
                                _context3.t0 = _context3["catch"](0);

                                if (!cb) {
                                    _context3.next = 13;
                                    break;
                                }

                                return _context3.abrupt("return", cb(_context3.t0));

                            case 13:
                                throw _context3.t0;

                            case 14:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this, [
                    [0, 9]
                ]);
            }));

            function _handleBatch(_x6, _x7) {
                return _handleBatch2.apply(this, arguments);
            }

            return _handleBatch;
        }()
        /**
         * A promise-wrapped _handle.
         */

    }, {
        key: "_promiseHandle",
        value: function _promiseHandle(req) {
            var _this3 = this;

            return new Promise(function(resolve) {
                _this3._handle(req, function(_err, res) {
                    // There will always be a response, and it will always have any error
                    // that is caught and propagated.
                    resolve(res);
                });
            });
        }
        /**
         * Ensures that the request object is valid, processes it, and passes any
         * error and the response object to the given callback.
         *
         * Does not reject.
         */

    }, {
        key: "_handle",
        value: function() {
            var _handle2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4(callerReq, cb) {
                var _error2, _error3, req, res, error;

                return _regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object')) {
                                    _context4.next = 3;
                                    break;
                                }

                                _error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, "Requests must be plain objects. Received: ".concat(typeof callerReq), {
                                    request: callerReq
                                });
                                return _context4.abrupt("return", cb(_error2, {
                                    id: undefined,
                                    jsonrpc: '2.0',
                                    error: _error2
                                }));

                            case 3:
                                if (!(typeof callerReq.method !== 'string')) {
                                    _context4.next = 6;
                                    break;
                                }

                                _error3 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, "Must specify a string method. Received: ".concat(typeof callerReq.method), {
                                    request: callerReq
                                });
                                return _context4.abrupt("return", cb(_error3, {
                                    id: callerReq.id,
                                    jsonrpc: '2.0',
                                    error: _error3
                                }));

                            case 6:
                                req = Object.assign({}, callerReq);
                                res = {
                                    id: req.id,
                                    jsonrpc: req.jsonrpc
                                };
                                error = null;
                                _context4.prev = 9;
                                _context4.next = 12;
                                return this._processRequest(req, res);

                            case 12:
                                _context4.next = 17;
                                break;

                            case 14:
                                _context4.prev = 14;
                                _context4.t0 = _context4["catch"](9);
                                // A request handler error, a re-thrown middleware error, or something
                                // unexpected.
                                error = _context4.t0;

                            case 17:
                                if (error) {
                                    // Ensure no result is present on an errored response
                                    delete res.result;

                                    if (!res.error) {
                                        res.error = eth_rpc_errors_1.serializeError(error);
                                    }
                                }

                                return _context4.abrupt("return", cb(error, res));

                            case 19:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this, [
                    [9, 14]
                ]);
            }));

            function _handle(_x8, _x9) {
                return _handle2.apply(this, arguments);
            }

            return _handle;
        }()
        /**
         * For the given request and response, runs all middleware and their return
         * handlers, if any, and ensures that internal request processing semantics
         * are satisfied.
         */

    }, {
        key: "_processRequest",
        value: function() {
            var _processRequest2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee5(req, res) {
                var _yield$JsonRpcEngine$3, _yield$JsonRpcEngine$4, error, isComplete, returnHandlers;

                return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return JsonRpcEngine._runAllMiddleware(req, res, this._middleware);

                            case 2:
                                _yield$JsonRpcEngine$3 = _context5.sent;
                                _yield$JsonRpcEngine$4 = _slicedToArray(_yield$JsonRpcEngine$3, 3);
                                error = _yield$JsonRpcEngine$4[0];
                                isComplete = _yield$JsonRpcEngine$4[1];
                                returnHandlers = _yield$JsonRpcEngine$4[2];

                                // Throw if "end" was not called, or if the response has neither a result
                                // nor an error.
                                JsonRpcEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during
                                // middleware processing.


                                _context5.next = 10;
                                return JsonRpcEngine._runReturnHandlers(returnHandlers);

                            case 10:
                                if (!error) {
                                    _context5.next = 12;
                                    break;
                                }

                                throw error;

                            case 12:
                            case "end":
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function _processRequest(_x10, _x11) {
                return _processRequest2.apply(this, arguments);
            }

            return _processRequest;
        }()
        /**
         * Serially executes the given stack of middleware.
         *
         * @returns An array of any error encountered during middleware execution,
         * a boolean indicating whether the request was completed, and an array of
         * middleware-defined return handlers.
         */

    }], [{
        key: "_runAllMiddleware",
        value: function() {
            var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee6(req, res, middlewareStack) {
                var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JsonRpcEngine$5, _yield$JsonRpcEngine$6;

                return _regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                returnHandlers = [];
                                error = null;
                                isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers

                                _iterator = _createForOfIteratorHelper(middlewareStack);
                                _context6.prev = 4;

                                _iterator.s();

                            case 6:
                                if ((_step = _iterator.n()).done) {
                                    _context6.next = 18;
                                    break;
                                }

                                middleware = _step.value;
                                _context6.next = 10;
                                return JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);

                            case 10:
                                _yield$JsonRpcEngine$5 = _context6.sent;
                                _yield$JsonRpcEngine$6 = _slicedToArray(_yield$JsonRpcEngine$5, 2);
                                error = _yield$JsonRpcEngine$6[0];
                                isComplete = _yield$JsonRpcEngine$6[1];

                                if (!isComplete) {
                                    _context6.next = 16;
                                    break;
                                }

                                return _context6.abrupt("break", 18);

                            case 16:
                                _context6.next = 6;
                                break;

                            case 18:
                                _context6.next = 23;
                                break;

                            case 20:
                                _context6.prev = 20;
                                _context6.t0 = _context6["catch"](4);

                                _iterator.e(_context6.t0);

                            case 23:
                                _context6.prev = 23;

                                _iterator.f();

                                return _context6.finish(23);

                            case 26:
                                return _context6.abrupt("return", [error, isComplete, returnHandlers.reverse()]);

                            case 27:
                            case "end":
                                return _context6.stop();
                        }
                    }
                }, _callee6, null, [
                    [4, 20, 23, 26]
                ]);
            }));

            function _runAllMiddleware(_x12, _x13, _x14) {
                return _runAllMiddleware2.apply(this, arguments);
            }

            return _runAllMiddleware;
        }()
        /**
         * Runs an individual middleware.
         *
         * @returns An array of any error encountered during middleware exection,
         * and a boolean indicating whether the request should end.
         */

    }, {
        key: "_runMiddleware",
        value: function _runMiddleware(req, res, middleware, returnHandlers) {
            return new Promise(function(resolve) {
                var end = function end(err) {
                    var error = err || res.error;

                    if (error) {
                        res.error = eth_rpc_errors_1.serializeError(error);
                    } // True indicates that the request should end


                    resolve([error, true]);
                };

                var next = function next(returnHandler) {
                    if (res.error) {
                        end(res.error);
                    } else {
                        if (returnHandler) {
                            if (typeof returnHandler !== 'function') {
                                end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: \"next\" return handlers must be functions. " + "Received \"".concat(typeof returnHandler, "\" for request:\n").concat(jsonify(req)), {
                                    request: req
                                }));
                            }

                            returnHandlers.push(returnHandler);
                        } // False indicates that the request should not end


                        resolve([null, false]);
                    }
                };

                try {
                    middleware(req, res, next, end);
                } catch (error) {
                    end(error);
                }
            });
        }
        /**
         * Serially executes array of return handlers. The request and response are
         * assumed to be in their scope.
         */

    }, {
        key: "_runReturnHandlers",
        value: function() {
            var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee7(handlers) {
                var _iterator2, _step2, _loop;

                return _regeneratorRuntime.wrap(function _callee7$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _iterator2 = _createForOfIteratorHelper(handlers);
                                _context8.prev = 1;
                                _loop = /*#__PURE__*/ _regeneratorRuntime.mark(function _loop() {
                                    var handler;
                                    return _regeneratorRuntime.wrap(function _loop$(_context7) {
                                        while (1) {
                                            switch (_context7.prev = _context7.next) {
                                                case 0:
                                                    handler = _step2.value;
                                                    _context7.next = 3;
                                                    return new Promise(function(resolve, reject) {
                                                        handler(function(err) {
                                                            return err ? reject(err) : resolve();
                                                        });
                                                    });

                                                case 3:
                                                case "end":
                                                    return _context7.stop();
                                            }
                                        }
                                    }, _loop);
                                });

                                _iterator2.s();

                            case 4:
                                if ((_step2 = _iterator2.n()).done) {
                                    _context8.next = 8;
                                    break;
                                }

                                return _context8.delegateYield(_loop(), "t0", 6);

                            case 6:
                                _context8.next = 4;
                                break;

                            case 8:
                                _context8.next = 13;
                                break;

                            case 10:
                                _context8.prev = 10;
                                _context8.t1 = _context8["catch"](1);

                                _iterator2.e(_context8.t1);

                            case 13:
                                _context8.prev = 13;

                                _iterator2.f();

                                return _context8.finish(13);

                            case 16:
                            case "end":
                                return _context8.stop();
                        }
                    }
                }, _callee7, null, [
                    [1, 10, 13, 16]
                ]);
            }));

            function _runReturnHandlers(_x15) {
                return _runReturnHandlers2.apply(this, arguments);
            }

            return _runReturnHandlers;
        }()
        /**
         * Throws an error if the response has neither a result nor an error, or if
         * the "isComplete" flag is falsy.
         */

    }, {
        key: "_checkForCompletion",
        value: function _checkForCompletion(req, res, isComplete) {
            if (!('result' in res) && !('error' in res)) {
                throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: Response has no error or result for request:\n".concat(jsonify(req)), {
                    request: req
                });
            }

            if (!isComplete) {
                throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, "JsonRpcEngine: Nothing ended request:\n".concat(jsonify(req)), {
                    request: req
                });
            }
        }
    }]);

    return JsonRpcEngine;
}(safe_event_emitter_1.default);

exports.JsonRpcEngine = JsonRpcEngine;

function jsonify(request) {
    return JSON.stringify(request, null, 2);
}