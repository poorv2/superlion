"use strict";

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var _wrapNativeSuper = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper");

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EthereumProviderError = exports.EthereumRpcError = void 0;

var fast_safe_stringify_1 = require("fast-safe-stringify");
/**
 * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
 * per EIP-1474.
 * Permits any integer error code.
 */


var EthereumRpcError = /*#__PURE__*/ function(_Error) {
    _inherits(EthereumRpcError, _Error);

    function EthereumRpcError(code, message, data) {
        var _this;

        _classCallCheck(this, EthereumRpcError);

        if (!Number.isInteger(code)) {
            throw new Error('"code" must be an integer.');
        }

        if (!message || typeof message !== 'string') {
            throw new Error('"message" must be a nonempty string.');
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(EthereumRpcError).call(this, message));
        _this.code = code;

        if (data !== undefined) {
            _this.data = data;
        }

        return _this;
    }
    /**
     * Returns a plain object with all public class properties.
     */


    _createClass(EthereumRpcError, [{
        key: "serialize",
        value: function serialize() {
            var serialized = {
                code: this.code,
                message: this.message
            };

            if (this.data !== undefined) {
                serialized.data = this.data;
            }

            if (this.stack) {
                serialized.stack = this.stack;
            }

            return serialized;
        }
        /**
         * Return a string representation of the serialized error, omitting
         * any circular references.
         */

    }, {
        key: "toString",
        value: function toString() {
            return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);
        }
    }]);

    return EthereumRpcError;
}(_wrapNativeSuper(Error));

exports.EthereumRpcError = EthereumRpcError;
/**
 * Error subclass implementing Ethereum Provider errors per EIP-1193.
 * Permits integer error codes in the [ 1000 <= 4999 ] range.
 */

var EthereumProviderError = /*#__PURE__*/ function(_EthereumRpcError) {
    _inherits(EthereumProviderError, _EthereumRpcError);

    /**
     * Create an Ethereum Provider JSON-RPC error.
     * `code` must be an integer in the 1000 <= 4999 range.
     */
    function EthereumProviderError(code, message, data) {
        _classCallCheck(this, EthereumProviderError);

        if (!isValidEthProviderCode(code)) {
            throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
        }

        return _possibleConstructorReturn(this, _getPrototypeOf(EthereumProviderError).call(this, code, message, data));
    }

    return EthereumProviderError;
}(EthereumRpcError);

exports.EthereumProviderError = EthereumProviderError; // Internal

function isValidEthProviderCode(code) {
    return Number.isInteger(code) && code >= 1000 && code <= 4999;
}

function stringifyReplacer(_, value) {
    if (value === '[Circular]') {
        return undefined;
    }

    return value;
}