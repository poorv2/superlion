var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

module.exports = getBlocksForRange;

function getBlocksForRange(_x) {
    return _getBlocksForRange.apply(this, arguments);
}

function _getBlocksForRange() {
    _getBlocksForRange = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(_ref) {
        var provider, fromBlock, toBlock, fromBlockNumber, toBlockNumber, blockCountToQuery, missingBlockNumbers, blockBodies;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        provider = _ref.provider, fromBlock = _ref.fromBlock, toBlock = _ref.toBlock;
                        if (!fromBlock) fromBlock = toBlock;
                        fromBlockNumber = hexToInt(fromBlock);
                        toBlockNumber = hexToInt(toBlock);
                        blockCountToQuery = toBlockNumber - fromBlockNumber + 1; // load all blocks from old to new (inclusive)

                        missingBlockNumbers = Array(blockCountToQuery).fill().map(function(_, index) {
                            return fromBlockNumber + index;
                        }).map(intToHex);
                        _context.next = 8;
                        return Promise.all(missingBlockNumbers.map(function(blockNum) {
                            return query(provider, 'eth_getBlockByNumber', [blockNum, false]);
                        }));

                    case 8:
                        blockBodies = _context.sent;
                        return _context.abrupt("return", blockBodies);

                    case 10:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee);
    }));
    return _getBlocksForRange.apply(this, arguments);
}

function hexToInt(hexString) {
    if (hexString === undefined || hexString === null) return hexString;
    return Number.parseInt(hexString, 16);
}

function incrementHexInt(hexString) {
    if (hexString === undefined || hexString === null) return hexString;
    var value = hexToInt(hexString);
    return intToHex(value + 1);
}

function intToHex(int) {
    if (int === undefined || int === null) return int;
    var hexString = int.toString(16);
    return '0x' + hexString;
}

function query(provider, method, params) {
    return new Promise(function(resolve, reject) {
        provider.sendAsync({
            id: 1,
            jsonrpc: '2.0',
            method: method,
            params: params
        }, function(err, res) {
            if (err) return reject(err);
            resolve(res.result);
        });
    });
}