var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var Subprovider = require('./subprovider.js'); // wraps a json-rpc-engine middleware in a subprovider interface


var JsonRpcEngineMiddlewareSubprovider = /*#__PURE__*/ function(_Subprovider) {
    "use strict";

    _inherits(JsonRpcEngineMiddlewareSubprovider, _Subprovider);

    // take a constructorFn to call once we have a reference to the engine
    function JsonRpcEngineMiddlewareSubprovider(constructorFn) {
        var _this;

        _classCallCheck(this, JsonRpcEngineMiddlewareSubprovider);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(JsonRpcEngineMiddlewareSubprovider).call(this));
        if (!constructorFn) throw new Error('JsonRpcEngineMiddlewareSubprovider - no constructorFn specified');
        _this._constructorFn = constructorFn;
        return _this;
    } // this is called once the subprovider has been added to the provider engine


    _createClass(JsonRpcEngineMiddlewareSubprovider, [{
        key: "setEngine",
        value: function setEngine(engine) {
            if (this.middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice');
            var blockTracker = engine._blockTracker;

            var middleware = this._constructorFn({
                engine: engine,
                provider: engine,
                blockTracker: blockTracker
            });

            if (!middleware) throw new Error('JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware');
            if (typeof middleware !== 'function') throw new Error('JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function');
            this.middleware = middleware;
        }
    }, {
        key: "handleRequest",
        value: function handleRequest(req, provEngNext, provEngEnd) {
            var res = {
                id: req.id
            };
            this.middleware(req, res, middlewareNext, middlewareEnd);

            function middlewareNext(handler) {
                provEngNext(function(err, result, cb) {
                    // update response object with result or error
                    if (err) {
                        delete res.result;
                        res.error = {
                            message: err.message || err
                        };
                    } else {
                        res.result = result;
                    } // call middleware's next handler (even if error)


                    if (handler) {
                        handler(cb);
                    } else {
                        cb();
                    }
                });
            }

            function middlewareEnd(err) {
                if (err) return provEngEnd(err);
                provEngEnd(null, res.result);
            }
        }
    }]);

    return JsonRpcEngineMiddlewareSubprovider;
}(Subprovider);

module.exports = JsonRpcEngineMiddlewareSubprovider;