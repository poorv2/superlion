"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }

    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EthereumDefinition = void 0;

var bn_js_1 = __importDefault(require("bn.js"));

exports.EthereumDefinition = {
    initNetworkType: function initNetworkType(web3) {
        return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            // truffle has started expecting gas used/limit to be
                            // hex strings to support bignumbers for other ledgers
                            overrides.getBlock(web3);
                            overrides.getTransaction(web3);
                            overrides.getTransactionReceipt(web3);

                        case 3:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee);
        }));
    }
};
var overrides = {
    // The ts-ignores are ignoring the checks that are
    // saying that web3.eth.getBlock is a function and doesn't
    // have a `method` property, which it does
    getBlock: function getBlock(web3) {
        // @ts-ignore
        var _oldFormatter = web3.eth.getBlock.method.outputFormatter; // @ts-ignore

        web3.eth.getBlock.method.outputFormatter = function(block) {
            // @ts-ignore
            var result = _oldFormatter.call(web3.eth.getBlock.method, block); // Perhaps there is a better method of doing this,
            // but the raw hexstrings work for the time being


            result.gasLimit = "0x" + new bn_js_1.default(result.gasLimit).toString(16);
            result.gasUsed = "0x" + new bn_js_1.default(result.gasUsed).toString(16);
            return result;
        };
    },
    getTransaction: function getTransaction(web3) {
        var _oldTransactionFormatter = // @ts-ignore
            web3.eth.getTransaction.method.outputFormatter; // @ts-ignore

        web3.eth.getTransaction.method.outputFormatter = function(tx) {
            var result = _oldTransactionFormatter.call( // @ts-ignore
                web3.eth.getTransaction.method, tx); // Perhaps there is a better method of doing this,
            // but the raw hexstrings work for the time being


            result.gas = "0x" + new bn_js_1.default(result.gas).toString(16);
            return result;
        };
    },
    getTransactionReceipt: function getTransactionReceipt(web3) {
        var _oldTransactionReceiptFormatter = // @ts-ignore
            web3.eth.getTransactionReceipt.method.outputFormatter; // @ts-ignore

        web3.eth.getTransactionReceipt.method.outputFormatter = function(receipt) {
            var result = _oldTransactionReceiptFormatter.call( // @ts-ignore
                web3.eth.getTransactionReceipt.method, receipt); // Perhaps there is a better method of doing this,
            // but the raw hexstrings work for the time being


            result.gasUsed = "0x" + new bn_js_1.default(result.gasUsed).toString(16);
            return result;
        };
    }
};