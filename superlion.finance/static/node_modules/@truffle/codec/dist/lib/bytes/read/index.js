"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _marked = /*#__PURE__*/ _regeneratorRuntime.mark(readCode);

var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});

var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
        for (var k in mod) {
            if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }

    __setModuleDefault(result, mod);

    return result;
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.readBytes = exports.readCode = void 0;

var Evm = __importStar(require("../../evm"));

var errors_1 = require("../../errors");

function readCode(pointer, state) {
    var code;
    return _regeneratorRuntime.wrap(function readCode$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    code = state.code;

                    if (code) {
                        _context.next = 5;
                        break;
                    }

                    _context.next = 4;
                    return {
                        type: "code",
                        address: Evm.Utils.toAddress(state.specials.this)
                    };

                case 4:
                    code = _context.sent;

                case 5:
                    return _context.abrupt("return", readBytes(pointer, Object.assign(Object.assign({}, state), {
                        code: code
                    })));

                case 6:
                case "end":
                    return _context.stop();
            }
        }
    }, _marked);
}

exports.readCode = readCode;

function readBytes(pointer, state) {
    var sourceBytes = state[pointer.location];
    var offset = pointer.start,
        length = pointer.length;

    if (!Number.isSafeInteger(offset + length)) {
        throw new errors_1.DecodingError({
            kind: "ReadErrorBytes",
            location: pointer.location,
            start: offset,
            length: length
        });
    } // grab `length` bytes no matter what, here fill this array


    var bytes = new Uint8Array(length);
    bytes.fill(0); //fill it wil zeroes to start
    //if the start is beyond the end of the source, just return those 0s

    if (offset >= sourceBytes.length) {
        return bytes;
    } // if we're reading past the end of the source, truncate the length to read


    var excess = offset + length - sourceBytes.length;
    var readLength;

    if (excess > 0) {
        readLength = sourceBytes.length - offset;
    } else {
        readLength = length;
    } //get the (truncated) bytes


    var existing = new Uint8Array(sourceBytes.buffer, offset, readLength); //copy it into our buffer

    bytes.set(existing);
    return bytes;
}

exports.readBytes = readBytes;