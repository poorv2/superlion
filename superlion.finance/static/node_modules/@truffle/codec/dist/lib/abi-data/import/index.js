"use strict";

var _slicedToArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray");

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.abiParameterToType = void 0;

var debug_1 = __importDefault(require("debug"));

var debug = debug_1.default("codec:abi-data:import");

var bn_js_1 = __importDefault(require("bn.js"));

function abiParameterToType(abi) {
    var typeName = abi.type;
    var typeHint = abi.internalType; //first: is it an array?

    var arrayMatch = typeName.match(/(.*)\[(\d*)\]$/);

    if (arrayMatch) {
        var baseTypeName = arrayMatch[1];
        var lengthAsString = arrayMatch[2]; //may be empty!

        var baseAbi = Object.assign(Object.assign({}, abi), {
            type: baseTypeName
        });
        var baseType = abiParameterToType(baseAbi);

        if (lengthAsString === "") {
            return {
                typeClass: "array",
                kind: "dynamic",
                baseType: baseType,
                typeHint: typeHint
            };
        } else {
            var length = new bn_js_1.default(lengthAsString);
            return {
                typeClass: "array",
                kind: "static",
                length: length,
                baseType: baseType,
                typeHint: typeHint
            };
        }
    } //otherwise, here are the simple cases


    var typeClass = typeName.match(/^([^0-9]+)/)[1];

    switch (typeClass) {
        case "uint":
        case "int":
            {
                var bits = typeName.match(/^u?int([0-9]+)/)[1];
                return {
                    typeClass: typeClass,
                    bits: parseInt(bits),
                    typeHint: typeHint
                };
            }

        case "bytes":
            var _length = typeName.match(/^bytes([0-9]*)/)[1];

            if (_length === "") {
                return {
                    typeClass: typeClass,
                    kind: "dynamic",
                    typeHint: typeHint
                };
            } else {
                return {
                    typeClass: typeClass,
                    kind: "static",
                    length: parseInt(_length),
                    typeHint: typeHint
                };
            }

        case "address":
            return {
                typeClass: typeClass,
                kind: "general",
                typeHint: typeHint
            };

        case "string":
        case "bool":
            return {
                typeClass: typeClass,
                typeHint: typeHint
            };

        case "fixed":
        case "ufixed":
            {
                var _typeName$match = typeName.match(/^u?fixed([0-9]+)x([0-9]+)/),
                    _typeName$match2 = _slicedToArray(_typeName$match, 3),
                    _ = _typeName$match2[0],
                    _bits = _typeName$match2[1],
                    places = _typeName$match2[2];

                return {
                    typeClass: typeClass,
                    bits: parseInt(_bits),
                    places: parseInt(places),
                    typeHint: typeHint
                };
            }

        case "function":
            return {
                typeClass: typeClass,
                visibility: "external",
                kind: "general",
                typeHint: typeHint
            };

        case "tuple":
            var memberTypes = abi.components.map(function(component) {
                return {
                    name: component.name || undefined,
                    type: abiParameterToType(component)
                };
            });
            return {
                typeClass: typeClass,
                memberTypes: memberTypes,
                typeHint: typeHint
            };
    }
}

exports.abiParameterToType = abiParameterToType;