var _defineProperty = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty");

var _toConsumableArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray");

var _slicedToArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray");

var execute = require("../execute");

var debug = require("debug")("contract:contract:bootstrap");

module.exports = function(fn) {
    // Add our static methods
    // Add something here about excluding send, privately defined methods
    Object.keys(fn._constructorMethods).forEach(function(key) {
        fn[key] = fn._constructorMethods[key].bind(fn);
    }); // Add our properties.

    Object.keys(fn._properties).forEach(function(key) {
        fn.addProp(key, fn._properties[key]);
    }); // estimateGas & request as sub-property of new

    fn["new"].estimateGas = execute.estimateDeployment.bind(fn);
    fn["new"].request = execute.requestDeployment.bind(fn); //add enumerations. (probably these should go in
    //constructorMethods.js, but this is easier to modify... we'll
    //redo all this in the rewrite anyway)

    if (fn._json) {
        //getters will throw otherwise!
        if (fn.ast) {
            //note this was set up earlier
            var node = locateNode(fn.contractName, fn.ast); //name also set up earlier

            if (node) {
                fn.enums = extractEnums(node);

                for (var _i = 0, _Object$entries = Object.entries(fn.enums); _i < _Object$entries.length; _i++) {
                    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                        name = _Object$entries$_i[0],
                        enumeration = _Object$entries$_i[1];

                    //enum is a reserved word :P
                    if (!(name in fn)) {
                        //don't overwrite anything!
                        fn[name] = enumeration;
                    }
                }
            }
        }
    }

    return fn;
};

function locateNode(name, ast) {
    if (ast.nodeType === "SourceUnit") {
        return ast.nodes.find(function(node) {
            return node.nodeType === "ContractDefinition" && node.name === name;
        });
    } else {
        return undefined;
    }
}

function extractEnums(node) {
    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(node.nodes.filter(function(definition) {
        return definition.nodeType === "EnumDefinition";
    }).map(function(definition) {
        return _defineProperty({}, definition.name, Object.assign.apply(Object, [{}].concat(_toConsumableArray(definition.members.map(function(member, index) {
            return _defineProperty({}, member.name, index);
        })))));
    }))));
}