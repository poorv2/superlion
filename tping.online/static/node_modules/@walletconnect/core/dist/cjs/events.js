"use strict";

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

Object.defineProperty(exports, "__esModule", {
    value: true
});

var utils_1 = require("@walletconnect/utils");

var EventManager = /*#__PURE__*/ function() {
    function EventManager() {
        _classCallCheck(this, EventManager);

        this._eventEmitters = [];
    }

    _createClass(EventManager, [{
        key: "subscribe",
        value: function subscribe(eventEmitter) {
            this._eventEmitters.push(eventEmitter);
        }
    }, {
        key: "trigger",
        value: function trigger(payload) {
            var eventEmitters = [];
            var event;

            if (utils_1.isJsonRpcRequest(payload)) {
                event = payload.method;
            } else if (utils_1.isJsonRpcResponseSuccess(payload) || utils_1.isJsonRpcResponseError(payload)) {
                event = "response:".concat(payload.id);
            } else if (utils_1.isInternalEvent(payload)) {
                event = payload.event;
            } else {
                event = "";
            }

            if (event) {
                eventEmitters = this._eventEmitters.filter(function(eventEmitter) {
                    return eventEmitter.event === event;
                });
            }

            if ((!eventEmitters || !eventEmitters.length) && !utils_1.isReservedEvent(event) && !utils_1.isInternalEvent(event)) {
                eventEmitters = this._eventEmitters.filter(function(eventEmitter) {
                    return eventEmitter.event === "call_request";
                });
            }

            eventEmitters.forEach(function(eventEmitter) {
                if (utils_1.isJsonRpcResponseError(payload)) {
                    var error = new Error(payload.error.message);
                    eventEmitter.callback(error, null);
                } else {
                    eventEmitter.callback(null, payload);
                }
            });
        }
    }]);

    return EventManager;
}();

exports.default = EventManager;