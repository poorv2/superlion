var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var _require = require('stream'),
    Transform = _require.Transform;

module.exports = function(KeccakState) {
    return /*#__PURE__*/ function(_Transform) {
        "use strict";

        _inherits(Keccak, _Transform);

        function Keccak(rate, capacity, delimitedSuffix, hashBitLength, options) {
            var _this;

            _classCallCheck(this, Keccak);

            _this = _possibleConstructorReturn(this, _getPrototypeOf(Keccak).call(this, options));
            _this._rate = rate;
            _this._capacity = capacity;
            _this._delimitedSuffix = delimitedSuffix;
            _this._hashBitLength = hashBitLength;
            _this._options = options;
            _this._state = new KeccakState();

            _this._state.initialize(rate, capacity);

            _this._finalized = false;
            return _this;
        }

        _createClass(Keccak, [{
            key: "_transform",
            value: function _transform(chunk, encoding, callback) {
                var error = null;

                try {
                    this.update(chunk, encoding);
                } catch (err) {
                    error = err;
                }

                callback(error);
            }
        }, {
            key: "_flush",
            value: function _flush(callback) {
                var error = null;

                try {
                    this.push(this.digest());
                } catch (err) {
                    error = err;
                }

                callback(error);
            }
        }, {
            key: "update",
            value: function update(data, encoding) {
                if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
                if (this._finalized) throw new Error('Digest already called');
                if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

                this._state.absorb(data);

                return this;
            }
        }, {
            key: "digest",
            value: function digest(encoding) {
                if (this._finalized) throw new Error('Digest already called');
                this._finalized = true;
                if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);

                var digest = this._state.squeeze(this._hashBitLength / 8);

                if (encoding !== undefined) digest = digest.toString(encoding);

                this._resetState();

                return digest;
            } // remove result from memory

        }, {
            key: "_resetState",
            value: function _resetState() {
                this._state.initialize(this._rate, this._capacity);

                return this;
            } // because sometimes we need hash right now and little later

        }, {
            key: "_clone",
            value: function _clone() {
                var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);

                this._state.copy(clone._state);

                clone._finalized = this._finalized;
                return clone;
            }
        }]);

        return Keccak;
    }(Transform);
};