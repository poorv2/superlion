'use strict';

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var Mixin = require('../../utils/mixin');

var PositionTrackingPreprocessorMixin = /*#__PURE__*/ function(_Mixin) {
    _inherits(PositionTrackingPreprocessorMixin, _Mixin);

    function PositionTrackingPreprocessorMixin(preprocessor) {
        var _this;

        _classCallCheck(this, PositionTrackingPreprocessorMixin);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(PositionTrackingPreprocessorMixin).call(this, preprocessor));
        _this.preprocessor = preprocessor;
        _this.isEol = false;
        _this.lineStartPos = 0;
        _this.droppedBufferSize = 0;
        _this.offset = 0;
        _this.col = 0;
        _this.line = 1;
        return _this;
    }

    _createClass(PositionTrackingPreprocessorMixin, [{
        key: "_getOverriddenMethods",
        value: function _getOverriddenMethods(mxn, orig) {
            return {
                advance: function advance() {
                    var pos = this.pos + 1;
                    var ch = this.html[pos]; //NOTE: LF should be in the last column of the line

                    if (mxn.isEol) {
                        mxn.isEol = false;
                        mxn.line++;
                        mxn.lineStartPos = pos;
                    }

                    if (ch === '\n' || ch === '\r' && this.html[pos + 1] !== '\n') {
                        mxn.isEol = true;
                    }

                    mxn.col = pos - mxn.lineStartPos + 1;
                    mxn.offset = mxn.droppedBufferSize + pos;
                    return orig.advance.call(this);
                },
                retreat: function retreat() {
                    orig.retreat.call(this);
                    mxn.isEol = false;
                    mxn.col = this.pos - mxn.lineStartPos + 1;
                },
                dropParsedChunk: function dropParsedChunk() {
                    var prevPos = this.pos;
                    orig.dropParsedChunk.call(this);
                    var reduction = prevPos - this.pos;
                    mxn.lineStartPos -= reduction;
                    mxn.droppedBufferSize += reduction;
                    mxn.offset = mxn.droppedBufferSize + this.pos;
                }
            };
        }
    }]);

    return PositionTrackingPreprocessorMixin;
}(Mixin);

module.exports = PositionTrackingPreprocessorMixin;