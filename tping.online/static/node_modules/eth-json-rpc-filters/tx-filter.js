var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _toConsumableArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true,
        didErr = false,
        err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally {
                if (didErr) throw err;
            }
        }
    };
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

var BaseFilter = require('./base-filter');

var getBlocksForRange = require('./getBlocksForRange');

var _require = require('./hexUtils'),
    incrementHexInt = _require.incrementHexInt;

var TxFilter = /*#__PURE__*/ function(_BaseFilter) {
    "use strict";

    _inherits(TxFilter, _BaseFilter);

    function TxFilter(_ref) {
        var _this;

        var provider = _ref.provider;

        _classCallCheck(this, TxFilter);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(TxFilter).call(this));
        _this.type = 'tx';
        _this.provider = provider;
        return _this;
    }

    _createClass(TxFilter, [{
        key: "update",
        value: function() {
            var _update = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(_ref2) {
                var oldBlock, toBlock, fromBlock, blocks, blockTxHashes, _iterator, _step, block;

                return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                oldBlock = _ref2.oldBlock;
                                toBlock = oldBlock;
                                fromBlock = incrementHexInt(oldBlock);
                                _context.next = 5;
                                return getBlocksForRange({
                                    provider: this.provider,
                                    fromBlock: fromBlock,
                                    toBlock: toBlock
                                });

                            case 5:
                                blocks = _context.sent;
                                blockTxHashes = [];
                                _iterator = _createForOfIteratorHelper(blocks);

                                try {
                                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                                        block = _step.value;
                                        blockTxHashes.push.apply(blockTxHashes, _toConsumableArray(block.transactions));
                                    } // add to results

                                } catch (err) {
                                    _iterator.e(err);
                                } finally {
                                    _iterator.f();
                                }

                                this.addResults(blockTxHashes);

                            case 10:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function update(_x) {
                return _update.apply(this, arguments);
            }

            return update;
        }()
    }]);

    return TxFilter;
}(BaseFilter);

module.exports = TxFilter;