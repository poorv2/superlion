var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _objectSpread = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var _require = require('./setup'),
    web3 = _require.web3;

var ethjsABI = require('ethjs-abi');

function findMethod(abi, name, args) {
    for (var i = 0; i < abi.length; i++) {
        if (abi[i].type === 'function') {
            var methodArgs = abi[i].inputs.map(function(input) {
                return input.type;
            }).join(',');

            if (abi[i].name === name && methodArgs === args) {
                return abi[i];
            }
        }
    }
}

function transaction(_x, _x2, _x3, _x4) {
    return _transaction.apply(this, arguments);
}

function _transaction() {
    _transaction = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(target, name, argsTypes, argsValues) {
        var opts,
            abiMethod,
            encodedData,
            _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        opts = _args.length > 4 && _args[4] !== undefined ? _args[4] : {};
                        abiMethod = findMethod(target.abi, name, argsTypes);
                        encodedData = ethjsABI.encodeMethod(abiMethod, argsValues);
                        _context.t0 = opts.from;

                        if (_context.t0) {
                            _context.next = 8;
                            break;
                        }

                        _context.next = 7;
                        return web3.eth.getAccounts();

                    case 7:
                        _context.t0 = _context.sent[0];

                    case 8:
                        opts.from = _context.t0;
                        return _context.abrupt("return", web3.eth.sendTransaction(_objectSpread({
                            data: encodedData,
                            to: target.address
                        }, opts)));

                    case 10:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee);
    }));
    return _transaction.apply(this, arguments);
}

function ether(from, to, value) {
    return web3.eth.sendTransaction({
        from: from,
        to: to,
        value: value,
        gasPrice: 0
    });
}

module.exports = {
    ether: ether,
    transaction: transaction
};