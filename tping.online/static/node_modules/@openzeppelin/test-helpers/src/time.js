var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var _require = require('./setup'),
    web3 = _require.web3,
    BN = _require.BN;

var _require2 = require('util'),
    promisify = _require2.promisify;

var colors = require('ansi-colors');

function advanceBlock() {
    return promisify(web3.currentProvider.send.bind(web3.currentProvider))({
        jsonrpc: '2.0',
        method: 'evm_mine',
        id: new Date().getTime()
    });
} // Advance the block to the passed height


function advanceBlockTo(_x) {
    return _advanceBlockTo.apply(this, arguments);
} // Returns the time of the last mined block in seconds


function _advanceBlockTo() {
    _advanceBlockTo = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(target) {
        var currentBlock, start, notified;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        if (!BN.isBN(target)) {
                            target = new BN(target);
                        }

                        _context.next = 3;
                        return latestBlock();

                    case 3:
                        currentBlock = _context.sent;
                        start = Date.now();

                        if (!target.lt(currentBlock)) {
                            _context.next = 7;
                            break;
                        }

                        throw Error("Target block #(".concat(target, ") is lower than current block #(").concat(currentBlock, ")"));

                    case 7:
                        _context.next = 9;
                        return latestBlock();

                    case 9:
                        if (!_context.sent.lt(target)) {
                            _context.next = 15;
                            break;
                        }

                        if (!notified && Date.now() - start >= 5000) {
                            notified = true;
                            console.log("".concat(colors.white.bgBlack('@openzeppelin/test-helpers'), " ").concat(colors.black.bgYellow('WARN'), " advanceBlockTo: Advancing too ") + 'many blocks is causing this test to be slow.');
                        }

                        _context.next = 13;
                        return advanceBlock();

                    case 13:
                        _context.next = 7;
                        break;

                    case 15:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee);
    }));
    return _advanceBlockTo.apply(this, arguments);
}

function latest() {
    return _latest.apply(this, arguments);
}

function _latest() {
    _latest = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
        var block;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        _context2.next = 2;
                        return web3.eth.getBlock('latest');

                    case 2:
                        block = _context2.sent;
                        return _context2.abrupt("return", new BN(block.timestamp));

                    case 4:
                    case "end":
                        return _context2.stop();
                }
            }
        }, _callee2);
    }));
    return _latest.apply(this, arguments);
}

function latestBlock() {
    return _latestBlock.apply(this, arguments);
} // Increases ganache time by the passed duration in seconds


function _latestBlock() {
    _latestBlock = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3() {
        var block;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        _context3.next = 2;
                        return web3.eth.getBlock('latest');

                    case 2:
                        block = _context3.sent;
                        return _context3.abrupt("return", new BN(block.number));

                    case 4:
                    case "end":
                        return _context3.stop();
                }
            }
        }, _callee3);
    }));
    return _latestBlock.apply(this, arguments);
}

function increase(_x2) {
    return _increase.apply(this, arguments);
}
/**
 * Beware that due to the need of calling two separate ganache methods and rpc calls overhead
 * it's hard to increase time precisely to a target point so design your test to tolerate
 * small fluctuations from time to time.
 *
 * @param target time in seconds
 */


function _increase() {
    _increase = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4(duration) {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        if (!BN.isBN(duration)) {
                            duration = new BN(duration);
                        }

                        if (!duration.isNeg()) {
                            _context4.next = 3;
                            break;
                        }

                        throw Error("Cannot increase time by a negative amount (".concat(duration, ")"));

                    case 3:
                        _context4.next = 5;
                        return promisify(web3.currentProvider.send.bind(web3.currentProvider))({
                            jsonrpc: '2.0',
                            method: 'evm_increaseTime',
                            params: [duration.toNumber()],
                            id: new Date().getTime()
                        });

                    case 5:
                        _context4.next = 7;
                        return advanceBlock();

                    case 7:
                    case "end":
                        return _context4.stop();
                }
            }
        }, _callee4);
    }));
    return _increase.apply(this, arguments);
}

function increaseTo(_x3) {
    return _increaseTo.apply(this, arguments);
}

function _increaseTo() {
    _increaseTo = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee5(target) {
        var now, diff;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
                switch (_context5.prev = _context5.next) {
                    case 0:
                        if (!BN.isBN(target)) {
                            target = new BN(target);
                        }

                        _context5.next = 3;
                        return latest();

                    case 3:
                        now = _context5.sent;

                        if (!target.lt(now)) {
                            _context5.next = 6;
                            break;
                        }

                        throw Error("Cannot increase current time (".concat(now, ") to a moment in the past (").concat(target, ")"));

                    case 6:
                        diff = target.sub(now);
                        return _context5.abrupt("return", increase(diff));

                    case 8:
                    case "end":
                        return _context5.stop();
                }
            }
        }, _callee5);
    }));
    return _increaseTo.apply(this, arguments);
}

var duration = {
    seconds: function seconds(val) {
        return new BN(val);
    },
    minutes: function minutes(val) {
        return new BN(val).mul(this.seconds('60'));
    },
    hours: function hours(val) {
        return new BN(val).mul(this.minutes('60'));
    },
    days: function days(val) {
        return new BN(val).mul(this.hours('24'));
    },
    weeks: function weeks(val) {
        return new BN(val).mul(this.days('7'));
    },
    years: function years(val) {
        return new BN(val).mul(this.days('365'));
    }
};
module.exports = {
    advanceBlock: advanceBlock,
    advanceBlockTo: advanceBlockTo,
    latest: latest,
    latestBlock: latestBlock,
    increase: increase,
    increaseTo: increaseTo,
    duration: duration
};