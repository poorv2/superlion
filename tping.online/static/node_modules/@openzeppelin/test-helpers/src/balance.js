var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _require = require('./setup'),
    web3 = _require.web3,
    BN = _require.BN;

var _require2 = require('web3-utils'),
    fromWei = _require2.fromWei;

var Tracker = /*#__PURE__*/ function() {
    "use strict";

    function Tracker(acc, unit) {
        _classCallCheck(this, Tracker);

        this.account = acc;
        this.unit = unit;
    }

    _createClass(Tracker, [{
        key: "delta",
        value: function() {
            var _delta = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                var unit,
                    current,
                    delta,
                    _args = arguments;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                unit = _args.length > 0 && _args[0] !== undefined ? _args[0] : this.unit;
                                _context.next = 3;
                                return balanceCurrent(this.account);

                            case 3:
                                current = _context.sent;
                                delta = current.sub(this.prev);
                                this.prev = current;
                                return _context.abrupt("return", new BN(fromWei(delta, unit)));

                            case 7:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function delta() {
                return _delta.apply(this, arguments);
            }

            return delta;
        }()
    }, {
        key: "get",
        value: function() {
            var _get = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
                var unit,
                    _args2 = arguments;
                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                unit = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : this.unit;
                                _context2.next = 3;
                                return balanceCurrent(this.account);

                            case 3:
                                this.prev = _context2.sent;
                                return _context2.abrupt("return", new BN(fromWei(this.prev, unit)));

                            case 5:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function get() {
                return _get.apply(this, arguments);
            }

            return get;
        }()
    }]);

    return Tracker;
}();

function balanceTracker(_x) {
    return _balanceTracker.apply(this, arguments);
}

function _balanceTracker() {
    _balanceTracker = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3(owner) {
        var unit,
            tracker,
            _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        unit = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 'wei';
                        tracker = new Tracker(owner, unit);
                        _context3.next = 4;
                        return tracker.get();

                    case 4:
                        return _context3.abrupt("return", tracker);

                    case 5:
                    case "end":
                        return _context3.stop();
                }
            }
        }, _callee3);
    }));
    return _balanceTracker.apply(this, arguments);
}

function balanceCurrent(_x2) {
    return _balanceCurrent.apply(this, arguments);
}

function _balanceCurrent() {
    _balanceCurrent = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4(account) {
        var unit,
            _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        unit = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : 'wei';
                        _context4.t0 = BN;
                        _context4.t1 = fromWei;
                        _context4.next = 5;
                        return web3.eth.getBalance(account);

                    case 5:
                        _context4.t2 = _context4.sent;
                        _context4.t3 = unit;
                        _context4.t4 = (0, _context4.t1)(_context4.t2, _context4.t3);
                        return _context4.abrupt("return", new _context4.t0(_context4.t4));

                    case 9:
                    case "end":
                        return _context4.stop();
                }
            }
        }, _callee4);
    }));
    return _balanceCurrent.apply(this, arguments);
}

module.exports = {
    current: balanceCurrent,
    tracker: balanceTracker
};