/*
	ISC License

	Copyright (c) 2019, Pierre-Louis Despaigne

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted, provided that the above
	copyright notice and this permission notice appear in all copies.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
var multiC = require('multicodec');

var _require = require('./profiles'),
    hexStringToBuffer = _require.hexStringToBuffer,
    profiles = _require.profiles;

var _require2 = require('./helpers'),
    cidV0ToV1Base32 = _require2.cidV0ToV1Base32;

module.exports = {
    //export some helpers functions
    helpers: {
        cidV0ToV1Base32: cidV0ToV1Base32
    },

    /**
     * Decode a Content Hash.
     * @param {string} hash an hex string containing a content hash
     * @return {string} the decoded content
     */
    decode: function decode(contentHash) {
        var buffer = hexStringToBuffer(contentHash);
        var codec = multiC.getCodec(buffer);
        var value = multiC.rmPrefix(buffer);
        var profile = profiles[codec];
        if (!profile) profile = profiles['default'];
        return profile.decode(value);
    },

    /**
     * Encode an IPFS address into a content hash
     * @param {string} ipfsHash string containing an IPFS address
     * @return {string} the resulting content hash
     */
    fromIpfs: function fromIpfs(ipfsHash) {
        return this.encode('ipfs-ns', ipfsHash);
    },

    /**
     * Encode a Swarm address into a content hash
     * @param {string} swarmHash string containing a Swarm address
     * @return {string} the resulting content hash
     */
    fromSwarm: function fromSwarm(swarmHash) {
        return this.encode('swarm-ns', swarmHash);
    },

    /**
     * General purpose encoding function
     * @param {string} codec 
     * @param {string} value 
     */
    encode: function encode(codec, value) {
        var profile = profiles[codec];
        if (!profile) profile = profiles['default'];
        var encodedValue = profile.encode(value);
        return multiC.addPrefix(codec, encodedValue).toString('hex');
    },

    /**
     * Extract the codec of a content hash
     * @param {string} hash hex string containing a content hash
     * @return {string} the extracted codec
     */
    getCodec: function getCodec(hash) {
        var buffer = hexStringToBuffer(hash);
        return multiC.getCodec(buffer);
    }
};