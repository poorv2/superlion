"use strict";

var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _createClass = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var _assertThisInitialized = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized");

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }

    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Web3Shim = void 0;

var web3_1 = __importDefault(require("web3"));

var ethereum_1 = require("./overloads/ethereum");

var quorum_1 = require("./overloads/quorum");

var fabric_evm_1 = require("./overloads/fabric-evm");

var web3js_1 = require("./overloads/web3js");

var initInterface = function initInterface(web3Shim) {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
        var networkTypes;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        networkTypes = new Map(Object.entries({
                            web3js: web3js_1.Web3JsDefinition,
                            ethereum: ethereum_1.EthereumDefinition,
                            quorum: quorum_1.QuorumDefinition,
                            "fabric-evm": fabric_evm_1.FabricEvmDefinition
                        }));
                        networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);

                    case 2:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee);
    }));
}; // March 14, 2019 - Mike Seese:
// This shim was intended to be temporary (see the above comment)
// with the idea of a more robust implementation. That implementation
// would essentially take this shim and include it under the
// ethereum/apis/web3 (or something like that) structure.
// I chose to extend/inherit web3 here to keep scope minimal for
// getting web3 to behave with Quorum and AxCore (future/concurrent PR).
// I wanted to do as little changing to the original Truffle codebase, and
// for it to still expect a web3 instance. Otherwise, the scope of these
// quick support work would be high. The "Web3Shim" is a shim for only
// web3.js, and it was not intended to serve as the general purpose
// truffle <=> all DLTs adapter. We have other commitments currently that
// should drive the development of the correct architecture of
// `@truffle/interface-adapter`that should use this work in a more
// sane and organized manner.


var Web3Shim = /*#__PURE__*/ function(_web3_1$default) {
    _inherits(Web3Shim, _web3_1$default);

    function Web3Shim(options) {
        var _this;

        _classCallCheck(this, Web3Shim);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(Web3Shim).call(this));

        if (options) {
            _this.networkType = options.networkType || "ethereum";

            if (options.provider) {
                _this.setProvider(options.provider);
            }
        } else {
            _this.networkType = "ethereum";
        }

        initInterface(_assertThisInitialized(_assertThisInitialized(_this)));
        return _this;
    }

    _createClass(Web3Shim, [{
        key: "setNetworkType",
        value: function setNetworkType(networkType) {
            this.networkType = networkType;
            initInterface(this);
        }
    }]);

    return Web3Shim;
}(web3_1.default);

exports.Web3Shim = Web3Shim;