"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _marked = /*#__PURE__*/ _regeneratorRuntime.mark(decodeSpecial),
    _marked2 = /*#__PURE__*/ _regeneratorRuntime.mark(decodeMagic);

var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});

var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
        for (var k in mod) {
            if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }

    __setModuleDefault(result, mod);

    return result;
};

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decodeMagic = exports.decodeSpecial = void 0;

var debug_1 = __importDefault(require("debug"));

var debug = debug_1.default("codec:special:decode");

var Basic = __importStar(require("../../basic"));

var Bytes = __importStar(require("../../bytes"));

var Compiler = __importStar(require("../../compiler"));

var Evm = __importStar(require("../../evm"));

function decodeSpecial(dataType, pointer, info) {
    return _regeneratorRuntime.wrap(function decodeSpecial$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    if (!(dataType.typeClass === "magic")) {
                        _context.next = 5;
                        break;
                    }

                    return _context.delegateYield(decodeMagic(dataType, pointer, info), "t0", 2);

                case 2:
                    return _context.abrupt("return", _context.t0);

                case 5:
                    return _context.delegateYield(Basic.Decode.decodeBasic(dataType, pointer, info), "t1", 6);

                case 6:
                    return _context.abrupt("return", _context.t1);

                case 7:
                case "end":
                    return _context.stop();
            }
        }
    }, _marked);
}

exports.decodeSpecial = decodeSpecial;

function decodeMagic(dataType, pointer, info) {
    var state, block, variables, _i, _variables, variable;

    return _regeneratorRuntime.wrap(function decodeMagic$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    state = info.state;
                    _context2.t0 = pointer.special;
                    _context2.next = _context2.t0 === "msg" ? 4 : _context2.t0 === "tx" ? 15 : _context2.t0 === "block" ? 22 : 36;
                    break;

                case 4:
                    _context2.t1 = dataType;
                    return _context2.delegateYield(Bytes.Decode.decodeBytes({
                        typeClass: "bytes",
                        kind: "dynamic",
                        location: "calldata"
                    }, {
                        location: "calldata",
                        start: 0,
                        length: state.calldata.length
                    }, info), "t2", 6);

                case 6:
                    _context2.t3 = _context2.t2;
                    return _context2.delegateYield(Basic.Decode.decodeBasic({
                        typeClass: "bytes",
                        kind: "static",
                        length: Evm.Utils.SELECTOR_SIZE
                    }, {
                        location: "calldata",
                        start: 0,
                        length: Evm.Utils.SELECTOR_SIZE
                    }, info), "t4", 8);

                case 8:
                    _context2.t5 = _context2.t4;
                    return _context2.delegateYield(Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {
                        location: "special",
                        special: "sender"
                    }, info), "t6", 10);

                case 10:
                    _context2.t7 = _context2.t6;
                    return _context2.delegateYield(Basic.Decode.decodeBasic({
                        typeClass: "uint",
                        bits: 256
                    }, {
                        location: "special",
                        special: "value"
                    }, info), "t8", 12);

                case 12:
                    _context2.t9 = _context2.t8;
                    _context2.t10 = {
                        data: _context2.t3,
                        sig: _context2.t5,
                        sender: _context2.t7,
                        value: _context2.t9
                    };
                    return _context2.abrupt("return", {
                        type: _context2.t1,
                        kind: "value",
                        value: _context2.t10
                    });

                case 15:
                    _context2.t11 = dataType;
                    return _context2.delegateYield(Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {
                        location: "special",
                        special: "origin"
                    }, info), "t12", 17);

                case 17:
                    _context2.t13 = _context2.t12;
                    return _context2.delegateYield(Basic.Decode.decodeBasic({
                        typeClass: "uint",
                        bits: 256
                    }, {
                        location: "special",
                        special: "gasprice"
                    }, info), "t14", 19);

                case 19:
                    _context2.t15 = _context2.t14;
                    _context2.t16 = {
                        origin: _context2.t13,
                        gasprice: _context2.t15
                    };
                    return _context2.abrupt("return", {
                        type: _context2.t11,
                        kind: "value",
                        value: _context2.t16
                    });

                case 22:
                    return _context2.delegateYield(Basic.Decode.decodeBasic(coinbaseType(info.currentContext.compiler), {
                        location: "special",
                        special: "coinbase"
                    }, info), "t17", 23);

                case 23:
                    _context2.t18 = _context2.t17;
                    block = {
                        coinbase: _context2.t18
                    };
                    //the other ones are all uint's, so let's handle them all at once; due to
                    //the lack of generator arrow functions, we do it by mutating block
                    variables = ["difficulty", "gaslimit", "number", "timestamp"];

                    if (solidityVersionHasChainId(info.currentContext.compiler)) {
                        variables.push("chainid");
                    }

                    _i = 0, _variables = variables;

                case 28:
                    if (!(_i < _variables.length)) {
                        _context2.next = 35;
                        break;
                    }

                    variable = _variables[_i];
                    return _context2.delegateYield(Basic.Decode.decodeBasic({
                        typeClass: "uint",
                        bits: 256
                    }, {
                        location: "special",
                        special: variable
                    }, info), "t19", 31);

                case 31:
                    block[variable] = _context2.t19;

                case 32:
                    _i++;
                    _context2.next = 28;
                    break;

                case 35:
                    return _context2.abrupt("return", {
                        type: dataType,
                        kind: "value",
                        value: block
                    });

                case 36:
                case "end":
                    return _context2.stop();
            }
        }
    }, _marked2);
}

exports.decodeMagic = decodeMagic;

function senderType(compiler) {
    switch (Compiler.Utils.solidityFamily(compiler)) {
        case "unknown":
        case "pre-0.5.0":
            return {
                typeClass: "address",
                kind: "general"
            };

        case "0.5.x":
            return {
                typeClass: "address",
                kind: "specific",
                payable: true
            };

        case "0.8.x":
            return {
                typeClass: "address",
                kind: "specific",
                payable: false
            };
    }
}

function coinbaseType(compiler) {
    switch (Compiler.Utils.solidityFamily(compiler)) {
        case "unknown":
        case "pre-0.5.0":
            return {
                typeClass: "address",
                kind: "general"
            };

        case "0.5.x":
        case "0.8.x":
            return {
                typeClass: "address",
                kind: "specific",
                payable: true
            };
    }
}

function solidityVersionHasChainId(compiler) {
    switch (Compiler.Utils.solidityFamily(compiler)) {
        case "unknown":
        case "pre-0.5.0":
        case "0.5.x":
            return false;

        case "0.8.x":
            return true;
    }
}