"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _marked = /*#__PURE__*/ _regeneratorRuntime.mark(decode),
    _marked2 = /*#__PURE__*/ _regeneratorRuntime.mark(decodeDispatch);

var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});

var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
        for (var k in mod) {
            if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }

    __setModuleDefault(result, mod);

    return result;
};

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: true
});

var debug_1 = __importDefault(require("debug"));

var debug = debug_1.default("codec:decode");

var AstConstant = __importStar(require("./ast-constant"));

var AbiData = __importStar(require("./abi-data"));

var Format = __importStar(require("./format"));

var Basic = __importStar(require("./basic"));

var Memory = __importStar(require("./memory"));

var Special = __importStar(require("./special"));

var Stack = __importStar(require("./stack"));

var Storage = __importStar(require("./storage"));

var Topic = __importStar(require("./topic"));

function decode(dataType, pointer, info) {
    var options,
        _args = arguments;
    return _regeneratorRuntime.wrap(function decode$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
                    _context.t0 = Format.Utils.Circularity;
                    return _context.delegateYield(decodeDispatch(dataType, pointer, info, options), "t1", 3);

                case 3:
                    _context.t2 = _context.t1;
                    return _context.abrupt("return", _context.t0.tie.call(_context.t0, _context.t2));

                case 5:
                case "end":
                    return _context.stop();
            }
        }
    }, _marked);
}

exports.default = decode;

function decodeDispatch(dataType, pointer, info) {
    var options,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function decodeDispatch$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    options = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {};
                    debug("type %O", dataType);
                    debug("pointer %O", pointer);
                    _context2.t0 = pointer.location;
                    _context2.next = _context2.t0 === "storage" ? 6 : _context2.t0 === "stack" ? 8 : _context2.t0 === "stackliteral" ? 10 : _context2.t0 === "definition" ? 12 : _context2.t0 === "special" ? 14 : _context2.t0 === "calldata" ? 16 : _context2.t0 === "eventdata" ? 16 : _context2.t0 === "returndata" ? 16 : _context2.t0 === "eventtopic" ? 18 : _context2.t0 === "code" ? 20 : _context2.t0 === "nowhere" ? 20 : _context2.t0 === "memory" ? 22 : 24;
                    break;

                case 6:
                    return _context2.delegateYield(Storage.Decode.decodeStorage(dataType, pointer, info), "t1", 7);

                case 7:
                    return _context2.abrupt("return", _context2.t1);

                case 8:
                    return _context2.delegateYield(Stack.Decode.decodeStack(dataType, pointer, info), "t2", 9);

                case 9:
                    return _context2.abrupt("return", _context2.t2);

                case 10:
                    return _context2.delegateYield(Stack.Decode.decodeLiteral(dataType, pointer, info), "t3", 11);

                case 11:
                    return _context2.abrupt("return", _context2.t3);

                case 12:
                    return _context2.delegateYield(AstConstant.Decode.decodeConstant(dataType, pointer, info), "t4", 13);

                case 13:
                    return _context2.abrupt("return", _context2.t4);

                case 14:
                    return _context2.delegateYield(Special.Decode.decodeSpecial(dataType, pointer, info), "t5", 15);

                case 15:
                    return _context2.abrupt("return", _context2.t5);

                case 16:
                    return _context2.delegateYield(AbiData.Decode.decodeAbi(dataType, pointer, info, options), "t6", 17);

                case 17:
                    return _context2.abrupt("return", _context2.t6);

                case 18:
                    return _context2.delegateYield(Topic.Decode.decodeTopic(dataType, pointer, info, options), "t7", 19);

                case 19:
                    return _context2.abrupt("return", _context2.t7);

                case 20:
                    return _context2.delegateYield(Basic.Decode.decodeBasic(dataType, pointer, info, Object.assign(Object.assign({}, options), {
                        paddingMode: "zero"
                    })), "t8", 21);

                case 21:
                    return _context2.abrupt("return", _context2.t8);

                case 22:
                    return _context2.delegateYield(Memory.Decode.decodeMemory(dataType, pointer, info, Object.assign(Object.assign({}, options), {
                        paddingMode: "right"
                    })), "t9", 23);

                case 23:
                    return _context2.abrupt("return", _context2.t9);

                case 24:
                case "end":
                    return _context2.stop();
            }
        }
    }, _marked2);
}