"use strict";

var _defineProperty = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty");

var _toConsumableArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray");

var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});

var __importStar = this && this.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
        for (var k in mod) {
            if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        }

    __setModuleDefault(result, mod);

    return result;
};

var __importDefault = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.abiEntryHasStorageParameters = exports.abiEntryIsObviouslyIllTyped = exports.topicsCount = exports.definitionMatchesAbi = exports.abisMatch = exports.abiSelector = exports.abiTupleSignature = exports.abiSignature = exports.abiHasPayableFallback = exports.computeSelectors = exports.DEFAULT_CONSTRUCTOR_ABI = void 0;

var debug_1 = __importDefault(require("debug"));

var debug = debug_1.default("codec:abi-data:utils"); // untyped import since no @types/web3-utils exists

var Web3Utils = require("web3-utils");

var Evm = __importStar(require("../evm"));

var Ast = __importStar(require("../ast"));

exports.DEFAULT_CONSTRUCTOR_ABI = {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable"
}; //note the return value only includes functions!

function computeSelectors(abi) {
    if (abi === undefined) {
        return undefined;
    }

    return Object.assign.apply(Object, [{}].concat(_toConsumableArray(abi.filter(function(abiEntry) {
        return abiEntry.type === "function";
    }).map(function(abiEntry) {
        return _defineProperty({}, abiSelector(abiEntry), abiEntry);
    }))));
}

exports.computeSelectors = computeSelectors; //does this ABI have a payable fallback (or receive) function?

function abiHasPayableFallback(abi) {
    if (abi === undefined) {
        return undefined;
    }

    return abi.some(function(abiEntry) {
        return (abiEntry.type === "fallback" || abiEntry.type === "receive") && abiEntry.stateMutability === "payable";
    });
}

exports.abiHasPayableFallback = abiHasPayableFallback; //NOTE: this function returns the written out SIGNATURE, not the SELECTOR

function abiSignature(abiEntry) {
    return abiEntry.name + abiTupleSignature(abiEntry.inputs);
}

exports.abiSignature = abiSignature;

function abiTupleSignature(parameters) {
    var components = parameters.map(abiTypeSignature);
    return "(" + components.join(",") + ")";
}

exports.abiTupleSignature = abiTupleSignature;

function abiTypeSignature(parameter) {
    var tupleMatch = parameter.type.match(/tuple(.*)/);

    if (tupleMatch === null) {
        //does not start with "tuple"
        return parameter.type;
    } else {
        var tail = tupleMatch[1]; //everything after "tuple"

        var tupleSignature = abiTupleSignature(parameter.components);
        return tupleSignature + tail;
    }
}

function abiSelector(abiEntry) {
    var signature = abiSignature(abiEntry); //NOTE: web3's soliditySha3 has a problem if the empty
    //string is passed in.  Fortunately, that should never happen here.

    var hash = Web3Utils.soliditySha3({
        type: "string",
        value: signature
    });

    switch (abiEntry.type) {
        case "event":
            return hash;

        case "function":
        case "error":
            return hash.slice(0, 2 + 2 * Evm.Utils.SELECTOR_SIZE);
            //arithmetic to account for hex string
    }
}

exports.abiSelector = abiSelector; //note: undefined does not match itself :P

function abisMatch(entry1, entry2) {
    //we'll consider two abi entries to match if they have the same
    //type, name (if applicable), and inputs (if applicable).
    //since there's already a signature function, we can just use that.
    if (!entry1 || !entry2) {
        return false;
    }

    if (entry1.type !== entry2.type) {
        return false;
    }

    switch (entry1.type) {
        case "function":
        case "event":
        case "error":
            return abiSignature(entry1) === abiSignature(entry2);

        case "constructor":
            return abiTupleSignature(entry1.inputs) === abiTupleSignature(entry2.inputs);

        case "fallback":
        case "receive":
            return true;
    }
}

exports.abisMatch = abisMatch;

function definitionMatchesAbi(abiEntry, definition, referenceDeclarations) {
    try {
        return abisMatch(abiEntry, Ast.Utils.definitionToAbi(definition, referenceDeclarations));
    } catch (_) {
        return false; //if an exception occurs, well, that's not a match!
    }
}

exports.definitionMatchesAbi = definitionMatchesAbi;

function topicsCount(abiEntry) {
    var selectorCount = abiEntry.anonymous ? 0 : 1; //if the event is not anonymous, we must account for the selector

    return abiEntry.inputs.filter(function(_ref2) {
        var indexed = _ref2.indexed;
        return indexed;
    }).length + selectorCount;
}

exports.topicsCount = topicsCount;

function abiEntryIsObviouslyIllTyped(abiEntry) {
    switch (abiEntry.type) {
        case "fallback":
        case "receive":
            return false;

        case "constructor":
        case "event":
        case "error":
            return abiEntry.inputs.some(abiParameterIsObviouslyIllTyped);

        case "function":
            return abiEntry.inputs.some(abiParameterIsObviouslyIllTyped) || abiEntry.outputs.some(abiParameterIsObviouslyIllTyped);
    }
}

exports.abiEntryIsObviouslyIllTyped = abiEntryIsObviouslyIllTyped;

function abiParameterIsObviouslyIllTyped(abiParameter) {
    var legalBaseTypeClasses = ["uint", "int", "fixed", "ufixed", "bool", "address", "bytes", "string", "function", "tuple"];
    var baseTypeClass = abiParameter.type.match(/^([a-z]*)/)[1];
    var baseTypeClassIsObviouslyWrong = !legalBaseTypeClasses.includes(baseTypeClass);

    if (abiParameter.components) {
        return abiParameter.components.some(abiParameterIsObviouslyIllTyped) || baseTypeClassIsObviouslyWrong;
    } else {
        return baseTypeClassIsObviouslyWrong;
    }
}

function abiEntryHasStorageParameters(abiEntry) {
    var isStorage = function isStorage(parameter) {
        return parameter.type.endsWith(" storage");
    };

    return abiEntry.type === "function" && (abiEntry.inputs.some(isStorage) || abiEntry.outputs.some(isStorage)); //Note the lack of recursion!  Storage parameters can only occur at
    //top level so there's no need to recurse here
    //(they can also only occur for functions)
}

exports.abiEntryHasStorageParameters = abiEntryHasStorageParameters;