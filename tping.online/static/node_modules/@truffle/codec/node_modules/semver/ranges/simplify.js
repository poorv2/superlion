var _slicedToArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray");

function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true,
        didErr = false,
        err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally {
                if (didErr) throw err;
            }
        }
    };
}

function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
    }
    return arr2;
}

// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.
var satisfies = require('../functions/satisfies.js');

var compare = require('../functions/compare.js');

module.exports = function(versions, range, options) {
    var set = [];
    var min = null;
    var prev = null;
    var v = versions.sort(function(a, b) {
        return compare(a, b, options);
    });

    var _iterator = _createForOfIteratorHelper(v),
        _step;

    try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var version = _step.value;
            var included = satisfies(version, range, options);

            if (included) {
                prev = version;
                if (!min) min = version;
            } else {
                if (prev) {
                    set.push([min, prev]);
                }

                prev = null;
                min = null;
            }
        }
    } catch (err) {
        _iterator.e(err);
    } finally {
        _iterator.f();
    }

    if (min) set.push([min, null]);
    var ranges = [];

    for (var _i = 0, _set = set; _i < _set.length; _i++) {
        var _set$_i = _slicedToArray(_set[_i], 2),
            _min = _set$_i[0],
            max = _set$_i[1];

        if (_min === max) ranges.push(_min);
        else if (!max && _min === v[0]) ranges.push('*');
        else if (!max) ranges.push(">=".concat(_min));
        else if (_min === v[0]) ranges.push("<=".concat(max));
        else ranges.push("".concat(_min, " - ").concat(max));
    }

    var simplified = ranges.join(' || ');
    var original = typeof range.raw === 'string' ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
};