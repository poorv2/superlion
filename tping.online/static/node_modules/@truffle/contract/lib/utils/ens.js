var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var ENSJS = require("ethereum-ens");

var _require = require("web3-utils"),
    isAddress = _require.isAddress;

module.exports = {
    convertENSNames: function() {
        var _convertENSNames = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee(_ref) {
            var ensSettings, inputArgs, methodABI, inputParams, web3, registryAddress, args, params;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            ensSettings = _ref.ensSettings, inputArgs = _ref.inputArgs, methodABI = _ref.methodABI, inputParams = _ref.inputParams, web3 = _ref.web3;
                            registryAddress = ensSettings.registryAddress;

                            if (!(inputArgs.length && methodABI)) {
                                _context.next = 8;
                                break;
                            }

                            _context.next = 5;
                            return this.convertENSArgsNames(inputArgs, methodABI, web3, registryAddress);

                        case 5:
                            args = _context.sent;
                            _context.next = 9;
                            break;

                        case 8:
                            args = inputArgs;

                        case 9:
                            _context.next = 11;
                            return this.convertENSParamsNames(inputParams, web3, registryAddress);

                        case 11:
                            params = _context.sent;
                            return _context.abrupt("return", {
                                args: args,
                                params: params
                            });

                        case 13:
                        case "end":
                            return _context.stop();
                    }
                }
            }, _callee, this);
        }));

        function convertENSNames(_x) {
            return _convertENSNames.apply(this, arguments);
        }

        return convertENSNames;
    }(),
    getNewENSJS: function getNewENSJS(_ref2) {
        var provider = _ref2.provider,
            registryAddress = _ref2.registryAddress;
        return new ENSJS(provider, registryAddress);
    },
    resolveNameToAddress: function resolveNameToAddress(name, ensjs) {
        return ensjs.resolver(name).addr();
    },
    convertENSArgsNames: function convertENSArgsNames(inputArgs, methodABI, web3, registryAddress) {
        var _this = this;

        if (methodABI.inputs.length === 0) return inputArgs;
        var ensjs = this.getNewENSJS({
            provider: web3.currentProvider,
            registryAddress: registryAddress
        });
        var convertedNames = inputArgs.map(function(argument, index) {
            if (index + 1 > methodABI.inputs.length) {
                return argument;
            } else if (methodABI.inputs[index].type === "address") {
                // Check all address arguments for ENS names
                var argIsAddress = isAddress(argument);
                if (argIsAddress) return argument;
                return _this.resolveNameToAddress(argument, ensjs);
            } else {
                return argument;
            }
        });
        return Promise.all(convertedNames);
    },
    convertENSParamsNames: function() {
        var _convertENSParamsNames = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2(params, web3, registryAddress) {
            var ensjs, newFrom;
            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!(params.from && !isAddress(params.from))) {
                                _context2.next = 8;
                                break;
                            }

                            ensjs = this.getNewENSJS({
                                provider: web3.currentProvider,
                                registryAddress: registryAddress
                            });
                            _context2.next = 4;
                            return this.resolveNameToAddress(params.from, ensjs);

                        case 4:
                            newFrom = _context2.sent;
                            return _context2.abrupt("return", Object.assign({}, params, {
                                from: newFrom
                            }));

                        case 8:
                            return _context2.abrupt("return", params);

                        case 9:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        function convertENSParamsNames(_x2, _x3, _x4) {
            return _convertENSParamsNames.apply(this, arguments);
        }

        return convertENSParamsNames;
    }()
};