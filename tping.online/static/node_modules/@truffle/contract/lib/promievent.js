var _slicedToArray = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray");

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

var debug = require("debug")("contract:promievent");

var DebugUtils = require("@truffle/debug-utils");

var Web3PromiEvent = require("web3-core-promievent");

function PromiEvent(justPromise) {
    var bugger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    var isDeploy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var _Web3PromiEvent = new Web3PromiEvent(justPromise),
        resolve = _Web3PromiEvent.resolve,
        reject = _Web3PromiEvent.reject,
        eventEmitter = _Web3PromiEvent.eventEmitter;

    var originalStackTrace = new Error().stack;

    function rejectHijacker(e) {
        var _this = this;

        debug("hijacking!");
        debug("hash: %s", this.txHash);
        var getSolidityStackTrace;

        if (bugger && this.txHash) {
            debug("debugging time!");

            getSolidityStackTrace = /*#__PURE__*/ function() {
                var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                    var report;
                    return _regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    _context.prev = 0;
                                    _context.next = 3;
                                    return bugger.load(_this.txHash);

                                case 3:
                                    _context.next = 5;
                                    return bugger.continueUntilBreakpoint();

                                case 5:
                                    report = bugger.stacktrace();
                                    _context.next = 8;
                                    return bugger.unload();

                                case 8:
                                    return _context.abrupt("return", DebugUtils.formatStacktrace(report, 4));

                                case 11:
                                    _context.prev = 11;
                                    _context.t0 = _context["catch"](0);
                                    return _context.abrupt("return", undefined);

                                case 14:
                                case "end":
                                    return _context.stop();
                            }
                        }
                    }, _callee, null, [
                        [0, 11]
                    ]);
                }));

                return function getSolidityStackTrace() {
                    return _ref.apply(this, arguments);
                };
            }();
        } else {
            getSolidityStackTrace = /*#__PURE__*/ function() {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                            switch (_context2.prev = _context2.next) {
                                case 0:
                                    return _context2.abrupt("return", undefined);

                                case 1:
                                case "end":
                                    return _context2.stop();
                            }
                        }
                    }, _callee2);
                }));

                return function getSolidityStackTrace() {
                    return _ref2.apply(this, arguments);
                };
            }();
        }

        getSolidityStackTrace().then(function(solidityStackTrace) {
            debug("e.stack: %s", e.stack);
            debug("originalStackTrace: %s", originalStackTrace);
            debug("solidityStackTrace: %s", solidityStackTrace);
            var initialLinesRegexp = isDeploy ? /^.*\n.*\n.*\n.*/ //first 4 lines (note . does not include \n)
                :
                /^.*\n.*\n.*/; //first 3 lines
            //we replace not just the first line but also the next 2 as they contain
            //useless stuff users shouldn't see; in case of deployments there's one
            //additional to remove

            try {
                var stackTrace = originalStackTrace.replace(initialLinesRegexp, e.stack.split("\n")[0]);

                if (solidityStackTrace) {
                    //let's split the solidity stack trace into first line & rest
                    var _solidityStackTrace$m = solidityStackTrace.match(/^(.*?)\r?\n((.|\r|\n)*)$/),
                        _solidityStackTrace$m2 = _slicedToArray(_solidityStackTrace$m, 3),
                        _ = _solidityStackTrace$m2[0],
                        solidityFirstLine = _solidityStackTrace$m2[1],
                        solidityRemaining = _solidityStackTrace$m2[2];

                    stackTrace = stackTrace.replace(/^.*/, //note that . does not include \n
                        solidityRemaining //note: this does not end in \n, so no modification needed
                    );
                    e.hijackedMessage = e.message;
                    e.message = solidityFirstLine;
                }

                e.hijackedStack = e.stack;
                e.stack = stackTrace;
            } catch (_) { //again, ignore errors
                //(not sure how this can happen here but I'll leave this block here)
            }

            reject(e);
        });
    }

    this.resolve = resolve;
    this.reject = rejectHijacker.bind(this);
    this.eventEmitter = eventEmitter;

    if (bugger) {
        this.debug = true;
    }
}

PromiEvent.resolve = Web3PromiEvent.resolve;

PromiEvent.prototype.setTransactionHash = function(txHash) {
    debug("setting!");
    debug("hash: %s", txHash);
    this.txHash = txHash;
};

module.exports = PromiEvent;