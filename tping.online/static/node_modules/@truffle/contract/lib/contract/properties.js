var utils = require("../utils");

var web3Utils = require("web3-utils");

module.exports = {
    contract_name: {
        get: function get() {
            return this.contractName;
        },
        set: function set(val) {
            this.contractName = val;
        }
    },
    contractName: {
        get: function get() {
            return this._json.contractName || "Contract";
        },
        set: function set(val) {
            this._json.contractName = val;
        }
    },
    gasMultiplier: {
        get: function get() {
            if (this._json.gasMultiplier === undefined) {
                this._json.gasMultiplier = 1.25;
            }

            return this._json.gasMultiplier;
        },
        set: function set(val) {
            this._json.gasMultiplier = val;
        }
    },
    timeoutBlocks: {
        get: function get() {
            return this._json.timeoutBlocks;
        },
        set: function set(val) {
            this._json.timeoutBlocks = val;
        }
    },
    autoGas: {
        get: function get() {
            if (this._json.autoGas === undefined) {
                this._json.autoGas = true;
            }

            return this._json.autoGas;
        },
        set: function set(val) {
            this._json.autoGas = val;
        }
    },
    numberFormat: {
        get: function get() {
            if (this._json.numberFormat === undefined) {
                this._json.numberFormat = "BN";
            }

            return this._json.numberFormat;
        },
        set: function set(val) {
            var allowedFormats = ["BigNumber", "BN", "String"];
            var msg = "Invalid number format setting: \"".concat(val, "\": ") + "valid formats are: ".concat(JSON.stringify(allowedFormats), ".");
            if (!allowedFormats.includes(val)) throw new Error(msg);
            this._json.numberFormat = val;
        }
    },
    abi: {
        get: function get() {
            return this._json.abi;
        },
        set: function set(val) {
            this._json.abi = val;
        }
    },
    metadata: function metadata() {
        return this._json.metadata;
    },
    network: function network() {
        var network_id = this.network_id;

        if (network_id == null) {
            var error = this.contractName + " has no network id set, cannot lookup artifact data." + " Either set the network manually using " + this.contractName + ".setNetwork(), run " + this.contractName + ".detectNetwork(), or use new()," + " at() or deployed() as a thenable which will detect the network automatically.";
            throw new Error(error);
        } // TODO: this might be bad; setting a value on a get.


        if (this._json.networks[network_id] == null) {
            var error = this.contractName + " has no network configuration" + " for its current network id (" + network_id + ").";
            throw new Error(error);
        }

        var returnVal = this._json.networks[network_id]; // Normalize output

        if (returnVal.links == null) {
            returnVal.links = {};
        }

        if (returnVal.events == null) {
            returnVal.events = {};
        }

        return returnVal;
    },
    networks: function networks() {
        return this._json.networks;
    },
    address: {
        get: function get() {
            var address = this.network.address;

            if (address == null) {
                var error = "Cannot find deployed address: " + this.contractName + " not deployed or address not set.";
                throw new Error(error);
            }

            return address;
        },
        set: function set(val) {
            if (val == null) {
                throw new Error("Cannot set deployed address; malformed value: " + val);
            }

            var network_id = this.network_id;

            if (network_id == null) {
                var error = this.contractName + " has no network id set, cannot lookup artifact data." + " Either set the network manually using " + this.contractName + ".setNetwork(), run " + this.contractName + ".detectNetwork()," + " or use new(), at() or deployed() as a thenable which will" + " detect the network automatically.";
                throw new Error(error);
            } // Create a network if we don't have one.


            if (this._json.networks[network_id] == null) {
                this._json.networks[network_id] = {
                    events: {},
                    links: {}
                };
            } // Finally, set the address.


            this.network.address = val;
        }
    },
    transactionHash: {
        get: function get() {
            return this.network.transactionHash;
        },
        set: function set(val) {
            this.network.transactionHash = val;
        }
    },
    links: function links() {
        if (!this.network_id) {
            var error = this.contractName + " has no network id set, cannot lookup artifact data." + " Either set the network manually using " + this.contractName + ".setNetwork()," + " run " + this.contractName + ".detectNetwork(), or use new(), at()" + " or deployed() as a thenable which will detect the network automatically.";
            throw new Error(error);
        }

        if (this._json.networks[this.network_id] == null) {
            return {};
        }

        return this.network.links || {};
    },
    events: function events() {
        var events;

        if (this._json.networks[this.network_id] == null) {
            events = {};
        } else {
            events = this.network.events || {};
        } // Merge abi events with whatever's returned.


        var abi = this.abi;
        abi.forEach(function(item) {
            if (item.type !== "event") return;

            if (item.signature) {
                events[item.signature] = item;
            } else {
                var signature = item.name + "(";
                item.inputs.forEach(function(input, index) {
                    signature += input.type;

                    if (index < item.inputs.length - 1) {
                        signature += ",";
                    }
                });
                signature += ")";
                var topic = web3Utils.keccak256(signature);
                events[topic] = item;
            }
        });
        return events;
    },
    binary: function binary() {
        return utils.linkBytecode(this.bytecode, this.links);
    },
    deployedBinary: function deployedBinary() {
        return utils.linkBytecode(this.deployedBytecode, this.links);
    },
    // deprecated; use bytecode
    unlinked_binary: {
        get: function get() {
            return this.bytecode;
        },
        set: function set(val) {
            this.bytecode = val;
        }
    },
    // alias for unlinked_binary; unlinked_binary will eventually be deprecated
    bytecode: {
        get: function get() {
            return this._json.bytecode;
        },
        set: function set(val) {
            this._json.bytecode = val;
        }
    },
    deployedBytecode: {
        get: function get() {
            var code = this._json.deployedBytecode;

            if (!code) {
                return code;
            }

            if (code.indexOf("0x") !== 0) {
                code = "0x" + code;
            }

            return code;
        },
        set: function set(val) {
            var code = val;

            if (val && val.indexOf("0x") !== 0) {
                code = "0x" + code;
            }

            this._json.deployedBytecode = code;
        }
    },
    sourceMap: {
        get: function get() {
            return this._json.sourceMap;
        },
        set: function set(val) {
            this._json.sourceMap = val;
        }
    },
    deployedSourceMap: {
        get: function get() {
            return this._json.deployedSourceMap;
        },
        set: function set(val) {
            this._json.deployedSourceMap = val;
        }
    },
    source: {
        get: function get() {
            return this._json.source;
        },
        set: function set(val) {
            this._json.source = val;
        }
    },
    sourcePath: {
        get: function get() {
            return this._json.sourcePath;
        },
        set: function set(val) {
            this._json.sourcePath = val;
        }
    },
    legacyAST: {
        get: function get() {
            return this._json.legacyAST;
        },
        set: function set(val) {
            this._json.legacyAST = val;
        }
    },
    ast: {
        get: function get() {
            return this._json.ast;
        },
        set: function set(val) {
            this._json.ast = val;
        }
    },
    compiler: {
        get: function get() {
            return this._json.compiler;
        },
        set: function set(val) {
            this._json.compiler = val;
        }
    },
    // Deprecated
    schema_version: function schema_version() {
        return this.schemaVersion;
    },
    schemaVersion: function schemaVersion() {
        return this._json.schemaVersion;
    },
    // deprecated
    updated_at: function updated_at() {
        return this.updatedAt;
    },
    updatedAt: function updatedAt() {
        try {
            return this.network.updatedAt || this._json.updatedAt;
        } catch (e) {
            return this._json.updatedAt;
        }
    },
    userdoc: function userdoc() {
        return this._json.userdoc;
    },
    devdoc: function devdoc() {
        return this._json.devdoc;
    },
    networkType: {
        get: function get() {
            return this._json.networkType || "ethereum";
        },
        set: function set(_networkType) {
            this._json.networkType = _networkType;
        }
    },
    immutableReferences: {
        get: function get() {
            return this._json.immutableReferences;
        },
        set: function set(refs) {
            this._json.immutableReferences = refs;
        }
    },
    generatedSources: {
        get: function get() {
            return this._json.generatedSources;
        },
        set: function set(sources) {
            this._json.generatedSources = sources;
        }
    },
    deployedGeneratedSources: {
        get: function get() {
            return this._json.deployedGeneratedSources;
        },
        set: function set(sources) {
            this._json.deployedGeneratedSources = sources;
        }
    },
    db: {
        get: function get() {
            return this._json.db;
        },
        set: function set(db) {
            this._json.db = db;
        }
    }
};