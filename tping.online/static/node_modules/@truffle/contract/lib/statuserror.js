var _classCallCheck = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck");

var _possibleConstructorReturn = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn");

var _getPrototypeOf = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf");

var _inherits = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits");

var TruffleError = require("@truffle/error");

var utils = require("./utils");

var defaultGas = 90000;

var StatusError = /*#__PURE__*/ function(_TruffleError) {
    "use strict";

    _inherits(StatusError, _TruffleError);

    function StatusError(args, tx, receipt, reason) {
        var _this;

        _classCallCheck(this, StatusError);

        var message;
        var gasLimit = args.gas || defaultGas;
        var reasonString = "";
        if (reason) reasonString = "Reason given: ".concat(reason, ".");

        if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {
            message = "Transaction: " + tx + " exited with an error (status 0) after consuming all gas.\n" + "     Please check that the transaction:\n" + "     - satisfies all conditions set by Solidity `assert` statements.\n" + "     - has enough gas to execute the full transaction.\n" + "     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).";
        } else {
            message = "Transaction: ".concat(tx, " exited with an error (status 0). ").concat(reasonString, "\n") + "     Please check that the transaction:\n" + "     - satisfies all conditions set by Solidity `require` statements.\n" + "     - does not trigger a Solidity `revert` statement.\n";
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(StatusError).call(this, message));
        _this.tx = tx;
        _this.receipt = receipt;
        _this.reason = reason;
        return _this;
    }

    return StatusError;
}(TruffleError);

module.exports = StatusError;