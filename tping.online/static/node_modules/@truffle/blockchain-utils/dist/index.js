"use strict";

var Blockchain = {
    getBlockByNumber: function getBlockByNumber(blockNumber, provider, callback) {
        var params = [blockNumber, true];
        provider.send({
            jsonrpc: "2.0",
            method: "eth_getBlockByNumber",
            params: params,
            id: Date.now()
        }, callback);
    },
    getBlockByHash: function getBlockByHash(blockHash, provider, callback) {
        var params = [blockHash, true];
        provider.send({
            jsonrpc: "2.0",
            method: "eth_getBlockByHash",
            params: params,
            id: Date.now()
        }, callback);
    },
    parse: function parse(uri) {
        var parsed = {};
        if (uri.indexOf("blockchain://") !== 0) return parsed;
        var cleanUri = uri.replace("blockchain://", "");
        var pieces = cleanUri.split("/block/");
        parsed.genesis_hash = "0x".concat(pieces[0]);
        parsed.block_hash = "0x".concat(pieces[1]);
        return parsed;
    },
    asURI: function asURI(provider) {
        var _this = this;

        return new Promise(function(resolve, reject) {
            var genesis, latest;

            _this.getBlockByNumber("0x0", provider, function(err, _ref) {
                var result = _ref.result;
                if (err) return reject(err);
                genesis = result;

                _this.getBlockByNumber("latest", provider, function(err, _ref2) {
                    var result = _ref2.result;
                    if (err) return reject(err);
                    latest = result;
                    var url = "blockchain://".concat(genesis.hash.replace("0x", ""), "/block/").concat(latest.hash.replace("0x", ""));
                    resolve(url);
                });
            });
        });
    },
    matches: function matches(uri, provider) {
        var _this2 = this;

        return new Promise(function(resolve, reject) {
            var parsedUri = _this2.parse(uri);

            var expectedGenesis = parsedUri.genesis_hash;
            var expectedBlock = parsedUri.block_hash;

            _this2.getBlockByNumber("0x0", provider, function(err, _ref3) {
                var result = _ref3.result;
                if (err) return reject(err);
                var block = result;
                if (block.hash !== expectedGenesis) return resolve(false);

                _this2.getBlockByHash(expectedBlock, provider, function(err, _ref4) {
                    var result = _ref4.result;
                    // Treat an error as if the block didn't exist. This is because
                    // some clients respond differently.
                    var block = result;

                    if (err || block == null) {
                        return resolve(false);
                    }

                    resolve(true);
                });
            });
        });
    }
};
module.exports = Blockchain;