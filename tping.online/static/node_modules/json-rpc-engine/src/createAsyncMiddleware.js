var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var _asyncToGenerator = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator");

/**
 * JsonRpcEngine only accepts callback-based middleware directly.
 * createAsyncMiddleware exists to enable consumers to pass in async middleware
 * functions.
 *
 * Async middleware have no "end" function. Instead, they "end" if they return
 * without calling "next". Rather than passing in explicit return handlers,
 * async middleware can simply await "next", and perform operations on the
 * response object when execution resumes.
 *
 * To accomplish this, createAsyncMiddleware passes the async middleware a
 * wrapped "next" function. That function calls the internal JsonRpcEngine
 * "next" function with a return handler that resolves a promise when called.
 *
 * The return handler will always be called. Its resolution of the promise
 * enables the control flow described above.
 */
module.exports = function createAsyncMiddleware(asyncMiddleware) {
    return function(req, res, next, end) {
        // nextPromise is the key to the implementation
        // it is resolved by the return handler passed to the
        // "next" function
        var resolveNextPromise;
        var nextPromise = new Promise(function(resolve) {
            resolveNextPromise = resolve;
        });
        var returnHandlerCallback, nextWasCalled;

        var asyncNext = /*#__PURE__*/ function() {
            var _ref = _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                nextWasCalled = true;
                                next(function(callback) {
                                    // eslint-disable-line callback-return
                                    returnHandlerCallback = callback;
                                    resolveNextPromise();
                                });
                                _context.next = 4;
                                return nextPromise;

                            case 4:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee);
            }));

            return function asyncNext() {
                return _ref.apply(this, arguments);
            };
        }();

        asyncMiddleware(req, res, asyncNext).then( /*#__PURE__*/ _asyncToGenerator( /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!nextWasCalled) {
                                _context2.next = 6;
                                break;
                            }

                            _context2.next = 3;
                            return nextPromise;

                        case 3:
                            // we must wait until the return handler is called
                            returnHandlerCallback(null);
                            _context2.next = 7;
                            break;

                        case 6:
                            end(null);

                        case 7:
                        case "end":
                            return _context2.stop();
                    }
                }
            }, _callee2);
        }))).catch(function(error) {
            if (returnHandlerCallback) {
                returnHandlerCallback(error);
            } else {
                end(error);
            }
        });
    };
};