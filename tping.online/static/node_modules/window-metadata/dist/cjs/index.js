"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var window_getters_1 = require("window-getters");

function getWindowMetadata() {
    var doc;
    var loc;

    try {
        doc = window_getters_1.getDocumentOrThrow();
        loc = window_getters_1.getLocationOrThrow();
    } catch (e) {
        return null;
    }

    function getIcons() {
        var links = doc.getElementsByTagName('link');
        var icons = [];

        for (var i = 0; i < links.length; i++) {
            var link = links[i];
            var rel = link.getAttribute('rel');

            if (rel) {
                if (rel.toLowerCase().indexOf('icon') > -1) {
                    var href = link.getAttribute('href');

                    if (href) {
                        if (href.toLowerCase().indexOf('https:') === -1 && href.toLowerCase().indexOf('http:') === -1 && href.indexOf('//') !== 0) {
                            var absoluteHref = loc.protocol + '//' + loc.host;

                            if (href.indexOf('/') === 0) {
                                absoluteHref += href;
                            } else {
                                var path = loc.pathname.split('/');
                                path.pop();
                                var finalPath = path.join('/');
                                absoluteHref += finalPath + '/' + href;
                            }

                            icons.push(absoluteHref);
                        } else if (href.indexOf('//') === 0) {
                            var absoluteUrl = loc.protocol + href;
                            icons.push(absoluteUrl);
                        } else {
                            icons.push(href);
                        }
                    }
                }
            }
        }

        return icons;
    }

    function getWindowMetadataOfAny() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var metaTags = doc.getElementsByTagName('meta');

        var _loop = function _loop(i) {
            var tag = metaTags[i];
            var attributes = ['itemprop', 'property', 'name'].map(function(target) {
                return tag.getAttribute(target);
            }).filter(function(attr) {
                if (attr) {
                    return args.includes(attr);
                }

                return false;
            });

            if (attributes.length && attributes) {
                var content = tag.getAttribute('content');

                if (content) {
                    return {
                        v: content
                    };
                }
            }
        };

        for (var i = 0; i < metaTags.length; i++) {
            var _ret = _loop(i);

            if (typeof _ret === "object") return _ret.v;
        }

        return '';
    }

    function getName() {
        var name = getWindowMetadataOfAny('name', 'og:site_name', 'og:title', 'twitter:title');

        if (!name) {
            name = doc.title;
        }

        return name;
    }

    function getDescription() {
        var description = getWindowMetadataOfAny('description', 'og:description', 'twitter:description', 'keywords');
        return description;
    }

    var name = getName();
    var description = getDescription();
    var url = loc.origin;
    var icons = getIcons();
    var meta = {
        description: description,
        url: url,
        icons: icons,
        name: name
    };
    return meta;
}

exports.getWindowMetadata = getWindowMetadata;