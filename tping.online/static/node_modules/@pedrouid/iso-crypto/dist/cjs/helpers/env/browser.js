"use strict";

var _regeneratorRuntime = require("/Applications/XAMPP/xamppfiles/htdocs/aa-superlion-mainnet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator");

var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }

    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.browserSha512 = exports.browserSha256 = exports.browserHmacSha512Sign = exports.browserHmacSha256Sign = exports.browserAesDecrypt = exports.browserAesEncrypt = exports.browserImportKey = exports.browserExportKey = exports.getOps = exports.getAlgo = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;

var constants_1 = require("../constants");

function getBrowerCrypto() {
    return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};
}

exports.getBrowerCrypto = getBrowerCrypto;

function getSubtleCrypto() {
    var browserCrypto = getBrowerCrypto();
    return browserCrypto.subtle || browserCrypto.webkitSubtle;
}

exports.getSubtleCrypto = getSubtleCrypto;

function getAlgo(type) {
    return type === constants_1.AES_BROWSER_ALGO ? {
        length: constants_1.AES_LENGTH,
        name: constants_1.AES_BROWSER_ALGO
    } : {
        hash: {
            name: constants_1.HMAC_BROWSER_ALGO
        },
        name: constants_1.HMAC_BROWSER
    };
}

exports.getAlgo = getAlgo;

function getOps(type) {
    return type === constants_1.AES_BROWSER_ALGO ? [constants_1.ENCRYPT_OP, constants_1.DECRYPT_OP] : [constants_1.SIGN_OP, constants_1.VERIFY_OP];
}

exports.getOps = getOps;

function browserExportKey(cryptoKey) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.AES_BROWSER_ALGO;
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee() {
        var subtle;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        subtle = getSubtleCrypto();
                        _context.t0 = Uint8Array;
                        _context.next = 4;
                        return subtle.exportKey('raw', cryptoKey);

                    case 4:
                        _context.t1 = _context.sent;
                        return _context.abrupt("return", new _context.t0(_context.t1));

                    case 6:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee);
    }));
}

exports.browserExportKey = browserExportKey;

function browserImportKey(buffer) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : constants_1.AES_BROWSER_ALGO;
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee2() {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
                switch (_context2.prev = _context2.next) {
                    case 0:
                        return _context2.abrupt("return", getSubtleCrypto().importKey('raw', buffer, getAlgo(type), true, getOps(type)));

                    case 1:
                    case "end":
                        return _context2.stop();
                }
            }
        }, _callee2);
    }));
}

exports.browserImportKey = browserImportKey;

function browserAesEncrypt(iv, key, data) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee3() {
        var subtle, cryptoKey, result;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
                switch (_context3.prev = _context3.next) {
                    case 0:
                        subtle = getSubtleCrypto();
                        _context3.next = 3;
                        return browserImportKey(key, constants_1.AES_BROWSER_ALGO);

                    case 3:
                        cryptoKey = _context3.sent;
                        _context3.next = 6;
                        return subtle.encrypt({
                            iv: iv,
                            name: constants_1.AES_BROWSER_ALGO
                        }, cryptoKey, data);

                    case 6:
                        result = _context3.sent;
                        return _context3.abrupt("return", new Uint8Array(result));

                    case 8:
                    case "end":
                        return _context3.stop();
                }
            }
        }, _callee3);
    }));
}

exports.browserAesEncrypt = browserAesEncrypt;

function browserAesDecrypt(iv, key, data) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee4() {
        var subtle, cryptoKey, result;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
                switch (_context4.prev = _context4.next) {
                    case 0:
                        subtle = getSubtleCrypto();
                        _context4.next = 3;
                        return browserImportKey(key, constants_1.AES_BROWSER_ALGO);

                    case 3:
                        cryptoKey = _context4.sent;
                        _context4.next = 6;
                        return subtle.decrypt({
                            iv: iv,
                            name: constants_1.AES_BROWSER_ALGO
                        }, cryptoKey, data);

                    case 6:
                        result = _context4.sent;
                        return _context4.abrupt("return", new Uint8Array(result));

                    case 8:
                    case "end":
                        return _context4.stop();
                }
            }
        }, _callee4);
    }));
}

exports.browserAesDecrypt = browserAesDecrypt;

function browserHmacSha256Sign(key, data) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee5() {
        var subtle, cryptoKey, signature;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
                switch (_context5.prev = _context5.next) {
                    case 0:
                        subtle = getSubtleCrypto();
                        _context5.next = 3;
                        return browserImportKey(key, constants_1.HMAC_BROWSER);

                    case 3:
                        cryptoKey = _context5.sent;
                        _context5.next = 6;
                        return subtle.sign({
                            length: constants_1.HMAC_LENGTH,
                            name: constants_1.HMAC_BROWSER
                        }, cryptoKey, data);

                    case 6:
                        signature = _context5.sent;
                        return _context5.abrupt("return", new Uint8Array(signature));

                    case 8:
                    case "end":
                        return _context5.stop();
                }
            }
        }, _callee5);
    }));
}

exports.browserHmacSha256Sign = browserHmacSha256Sign;

function browserHmacSha512Sign(key, data) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee6() {
        var subtle, cryptoKey, signature;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
                switch (_context6.prev = _context6.next) {
                    case 0:
                        subtle = getSubtleCrypto();
                        _context6.next = 3;
                        return browserImportKey(key, constants_1.HMAC_BROWSER);

                    case 3:
                        cryptoKey = _context6.sent;
                        _context6.next = 6;
                        return subtle.sign({
                            length: constants_1.LENGTH_512,
                            name: constants_1.HMAC_BROWSER
                        }, cryptoKey, data);

                    case 6:
                        signature = _context6.sent;
                        return _context6.abrupt("return", new Uint8Array(signature));

                    case 8:
                    case "end":
                        return _context6.stop();
                }
            }
        }, _callee6);
    }));
}

exports.browserHmacSha512Sign = browserHmacSha512Sign;

function browserSha256(data) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee7() {
        var subtle, result;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
                switch (_context7.prev = _context7.next) {
                    case 0:
                        subtle = getSubtleCrypto();
                        _context7.next = 3;
                        return subtle.digest({
                            name: constants_1.SHA256_BROWSER_ALGO
                        }, data);

                    case 3:
                        result = _context7.sent;
                        return _context7.abrupt("return", new Uint8Array(result));

                    case 5:
                    case "end":
                        return _context7.stop();
                }
            }
        }, _callee7);
    }));
}

exports.browserSha256 = browserSha256;

function browserSha512(data) {
    return __awaiter(this, void 0, void 0, /*#__PURE__*/ _regeneratorRuntime.mark(function _callee8() {
        var subtle, result;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
                switch (_context8.prev = _context8.next) {
                    case 0:
                        subtle = getSubtleCrypto();
                        _context8.next = 3;
                        return subtle.digest({
                            name: constants_1.SHA512_BROWSER_ALGO
                        }, data);

                    case 3:
                        result = _context8.sent;
                        return _context8.abrupt("return", new Uint8Array(result));

                    case 5:
                    case "end":
                        return _context8.stop();
                }
            }
        }, _callee8);
    }));
}

exports.browserSha512 = browserSha512;